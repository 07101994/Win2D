<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>CanvasAnimatedControl Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="CanvasAnimatedControl class" /><meta name="System.Keywords" content="Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl class" /><meta name="System.Keywords" content="CanvasAnimatedControl class, about CanvasAnimatedControl class" /><meta name="Microsoft.Help.F1" content="Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl" /><meta name="Microsoft.Help.Id" content="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl" /><meta name="Description" content="XAML control intended for displaying animating content." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Microsoft.Graphics.Canvas.UI.Xaml" /><meta name="file" content="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl" /><meta name="guid" content="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Win2D documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Introduction.htm" title="Win2D documentation" tocid="roottoc">Win2D documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm" title="Microsoft.Graphics.Canvas.UI.Xaml" tocid="N_Microsoft_Graphics_Canvas_UI_Xaml">Microsoft.Graphics.Canvas.UI.Xaml</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl.htm" title="CanvasAnimatedControl Class" tocid="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl">CanvasAnimatedControl Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__ctor.htm" title="CanvasAnimatedControl Constructor " tocid="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__ctor">CanvasAnimatedControl Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Methods_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl.htm" title="CanvasAnimatedControl Methods" tocid="Methods_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl">CanvasAnimatedControl Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Properties_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl.htm" title="CanvasAnimatedControl Properties" tocid="Properties_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl">CanvasAnimatedControl Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Events_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl.htm" title="CanvasAnimatedControl Events" tocid="Events_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl">CanvasAnimatedControl Events</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">CanvasAnimatedControl Class</td></tr></table><span class="introStyle"></span><div class="summary">XAML control intended for displaying animating content.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_self">System<span id="LST59DEA28_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST59DEA28_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <a href="T_Windows_UI_Xaml_Controls_UserControl.htm">Windows.UI.Xaml.Controls<span id="LST59DEA28_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST59DEA28_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UserControl</a><br />    <span class="selflink">Microsoft.Graphics.Canvas.UI.Xaml<span id="LST59DEA28_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST59DEA28_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CanvasAnimatedControl</span><br /></div><p> </p><strong>Namespace:</strong> <a href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm">Microsoft.Graphics.Canvas.UI.Xaml</a><br /><strong>Assembly:</strong> Microsoft.Graphics.Canvas (in Microsoft.Graphics.Canvas.dll) Version: 0.0.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EACA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">CanvasAnimatedControl</span> : <span class="identifier">UserControl</span>, 
	<span class="identifier">ICanvasAnimatedControl</span>, <span class="identifier">ICanvasResourceCreatorWithDpi</span>, <span class="identifier">ICanvasResourceCreator</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACA");</script></div><p>The <span class="selflink">CanvasAnimatedControl</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__ctor.htm">CanvasAnimatedControl</a></td><td><div class="summary">Initializes a new instance of the CanvasAnimatedControl class.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ConvertDipsToPixels.htm">ConvertDipsToPixels</a></td><td><div class="summary">Converts units from device independent pixels (DIPs) to physical pixels based on the current DPI of this control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ConvertPixelsToDips.htm">ConvertPixelsToDips</a></td><td><div class="summary">Converts units from physical pixels to device independent pixels (DIPs) based on the current DPI of this control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_CreateCoreIndependentInputSource.htm">CreateCoreIndependentInputSource</a></td><td><div class="summary">Creates an input source that can process input on a non-UI thread (such as the game loop thread).</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Invalidate.htm">Invalidate</a></td><td><div class="summary">Marks this control as requiring redrawing.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_RemoveFromVisualTree.htm">RemoveFromVisualTree</a></td><td><div class="summary">Removes the control from the last FrameworkElement it was parented to.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ResetElapsedTime.htm">ResetElapsedTime</a></td><td><div class="summary">Ensures that only a single Update event will be raised on the next iteration of the game loop.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_RunOnGameLoopThreadAsync.htm">RunOnGameLoopThreadAsync</a></td><td><div class="summary">Does some work, specified using a DispatchedHandler, on the game loop thread.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID5RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ClearColor.htm">ClearColor</a></td><td><div class="summary">The color that the control is cleared to before the Draw event is raised.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_CustomDevice.htm">CustomDevice</a></td><td><div class="summary">Gets or sets an application-chosen device for this control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Device.htm">Device</a></td><td><div class="summary">Gets the underlying device used by this control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Dpi.htm">Dpi</a></td><td><div class="summary">Gets the current dots-per-inch (DPI) of this control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ForceSoftwareRenderer.htm">ForceSoftwareRenderer</a></td><td><div class="summary">Gets or sets the whether the devices that this control creates will be forced to software rendering.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_HasGameLoopThreadAccess.htm">HasGameLoopThreadAccess</a></td><td><div class="summary">Gets whether the current thread is the game loop thread.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_IsFixedTimeStep.htm">IsFixedTimeStep</a></td><td><div class="summary">Indicates whether the game loop is running in fixed or variable timing mode.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Paused.htm">Paused</a></td><td><div class="summary">Indicates whether the control's game loop is paused.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_ReadyToDraw.htm">ReadyToDraw</a></td><td><div class="summary">Gets whether the control is in a state where it is ready to draw.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Size.htm">Size</a></td><td><div class="summary">Gets the current size of the control, in device independent pixels (DIPs).</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_TargetElapsedTime.htm">TargetElapsedTime</a></td><td><div class="summary">Gets or sets the time between Update events</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_UseSharedDevice.htm">UseSharedDevice</a></td><td><div class="summary">Gets or sets whether this control should create a new device each time, or use a device which may common between other controls.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Events</span></div><div id="ID6RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_CreateResources.htm">CreateResources</a></td><td><div class="summary">Hook this event to create any resources needed for your drawing.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Draw.htm">Draw</a></td><td><div class="summary">Hook this event to draw the contents of the control.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_GameLoopStarting.htm">GameLoopStarting</a></td><td><div class="summary">Occurs on the game loop thread just before the game loop starts.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_GameLoopStopped.htm">GameLoopStopped</a></td><td><div class="summary">Occurs on the game loop thread just after the game loop stops.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_Update.htm">Update</a></td><td><div class="summary">Hook this event to update any data, as necessary, for your app's animation.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
          CanvasAnimatedControl uses a CanvasSwapChain and CanvasSwapChainPanel
          for displaying graphics.  The swap chain is automatically resized and
          recreated as necessary.
        </p><p>
          The control provides a game-style update and draw loop.
          This game loop runs on a dedicated thread.  This means that the game
          loop and XAML's UI thread cannot block each other, ensuring that XAML
          UI elements remain responsive regardless of what the game loop is
          doing (and vice versa).  However, it does require that care is taken
          when accessing data shared between the UI thread and the game loop
          thread.
        </p><p>
          When using CanvasAnimatedControl from managed code, care must be 
          taken to avoid memory leaks due to reference count cycles. See 
          <a href="RefCycles.htm">Avoiding memory leaks</a> for more information.
        </p><p>
          The control has three events that can be subscribed to:

          <dl><dt>CreateResources</dt><dd><p>
                This is raised when a new device is created and is the
                appropriate place to start loading bitmaps from disk and so on.
              </p><p>
                This event is raised on the UI thread.
              </p></dd><dt>Update</dt><dd><p>
                This tells the app to update animations, game logic, simulations
                etc.  Update will only ever be raised after CreateResources,
                including any tracked asynchronous actions, has completed.  See
                <a href="http://blogs.msdn.com/b/win2d/archive/2014/12/05/async-resource-loading-in-win2d.aspx">this
                blog post</a> for more details on asynchronous loading.
              </p><p>
                Depending on the value of IsFixedTimeStep, Update may be raised
                multiple times between each Draw event.  See below for more
                details.
              </p><p>
                This event is raised on the game loop thread.
              </p></dd><dt>Draw</dt><dd><p>
                This tells the app to draw the contents of the control, using
                CanvasDrawEventArgs.DrawingSession.  The control is been cleared
                to ClearColor before the Draw event is raised.
              </p><p>
                This event will only ever be raised after at least one Update
                has been completed.  However, it may be raised multiple times in
                succession without an Update if the control is resized or the
                ClearColor property is modified.
              </p><p>
                This event is raised on the game loop thread.
              </p></dd></dl></p><h3>Game Loop</h3><p>
          Each iteration of the game loop:
          <ul><li>raises some number of Update events</li><li>raises one Draw event</li></ul></p><p>
          The IsFixedTimeStep property controls how often the Update event is
          raised.  This is a boolean value, and when set to true we say that the
          control is running with "fixed timing".  When set to false it is
          running with "variable timing".
        </p><h4>Defaults</h4><dl><dt>IsFixedTimeStep</dt><dd>true</dd><dt>TargetElapsedTime</dt><dd>16.6ms (60 fps)</dd><dt>Paused</dt><dd>false</dd></dl><h4>Fixed Timing</h4><p>
          When IsFixedTimeStep is set to true, the control is running in fixed
          timing mode.  This mode is particularly useful for games since it
          provides a deterministic elapsed time between updates, providing
          consistency in game simulation regardless of actual display framerate.
        </p><p>
          When running in fixed timing mode mode, the Update event is raised at
          a fixed rate, controled by the TargetElapsedTime property.  For
          example, if TargetElapsedTime is set to its default value of 16.6ms,
          Update will be raised 60 times a second.  There are several different
          scenarios depending on how long the Update and Draw handlers take to
          complete:
        </p><p>
          The simplest situation is that the total time spent in Update + Draw
          is exactly 1/60 of a second. In this case the control will raise
          Update, then raise Draw, then look at the clock and notice it is time
          for another Update, then Draw, and so on. Simple!
        </p><p>
          What if Update + Draw takes less than 1/60 of a second?  Also simple.
          Here the control raises Update, then Draw, then looks at the clock,
          notices there is some time left over, so waits until it is time to
          raise Update again.
        </p><p>
          What if Update + Draw takes longer than 1/60 of a second?  This is
          where things get complicated. There are many reasons why this could
          happen: 

          <ol><li>
              The computer might be slightly too slow to run the at the desired
              speed.
            </li><li>
              Or the computer might be way too slow to run the game at the
              desired speed!
            </li><li>
              The computer might be basically fast enough, but this particular
              frame might have taken an unusually long time for some
              reason. Perhaps there were too many explosions on screen, or there
              was a garbage collection.
            </li><li>
              The app could have been paused in the debugger.
            </li></ol>

          The control does the same thing in response to all four causes of slowness:

          <ul><li>CanvasTimingInformation.IsRunningSlowly to true.</li><li>Raises Update extra times (without calling Draw) until it catches up.</li><li>If things are getting ridiculous and too many Updates are
            required to catch up, it just gives up.</li></ul>
         
          More information on this algorithm can be found in <a href="http://blogs.msdn.com/b/shawnhar/archive/2007/07/25/understanding-gametime.aspx">this
          blog post</a>.
        </p><h4>Variable Timing</h4><p>
          When IsFixedTimeStep is set to false, the control is running in
          variable timing mode.  In this mode one, and only one, Update event is
          always raised before each Draw event.  The app can determine how much
          time has passed between Update events by examining the
          CanvasTimingInformation available through the event args.
        </p><h4>Paused behavior</h4><p>
          When the Paused property is set to true, the control will stop raising
          Update events.  However, when the control is resized or the clear
          color has changed, the Draw event will be raised to ensure that the
          display has been updated accordingly.
        </p><h4>Pointer Input</h4><p>
          CanvasAnimatedControl can raise pointer input (pen, mouse, touch)
          events on the game loop thread (where usually for XAML controls these
          are raised on the UI thread).  This allows apps to process input
          events synchronized with their game loop, rather than with XAML's
          event loop.  Since the events are raised on the game loop thread there
          are no threading concerns about state shared between the input event
          handlers, the update handler or the draw handler.
        </p><p>
          The pointer events can be subscribed to using the Input property.  For
          example:

          <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAMABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAMABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAMABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">animatedControl.Input.PointerPressed += OnPointerPressed;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAMABA");</script></p><p>
        While using pointer functionality through Input, do not call 
        <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.icorepointerinputsource.setpointercapture.aspx">SetPointerCapture</a>, 
        <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.icorepointerinputsource.releasepointercapture.aspx">ReleasePointerCapture</a>, 
        <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.icorepointerinputsource.hascapture.aspx">HasCapture</a>, or use the event
        <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.icorepointerinputsource.pointercapturelost.aspx">PointerCaptureLost</a>,
        as these are not supported through CanvasAnimatedControl.
        </p><h4>Keyboard Input</h4><p>
          The simplest way to receive keyboard input events is to subscribe to
          CoreWindow's <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.corewindow.keydown.aspx">KeyDown</a>
          and <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.corewindow.keyup.aspx">KeyUp</a>
          events.  The handlers for these events will be called on the UI
          thread, so if these need to access data that is also accessed by the
          game loop thread some kind of synchronization is required.
        </p><p>
          One possible approach here is to use <a href="M_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl_RunOnGameLoopThreadAsync.htm">RunOnGameLoopThreadAsync(DispatchedHandler)</a> to execute code on the game loop thread.  The gotcha here is that
          the <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.keyeventargs.aspx">KeyEventArgs</a>
          is not agile and so should not be accessed from the game loop thead.
          Although this will work, it may have surprising performance effects
          since method calls / property accesses on the KeyEventArgs object
          could involving dispatching back to the UI thread!
        </p><p>
          Instead, process or extract the data from KeyEventArgs that needs to
          be accessed on the UI thread.  Example:

          <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAHABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAHABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAHABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Register for keyboard events in the loaded handler...</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> PageLoaded(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    Window.Current.CoreWindow.KeyDown += KeyDown_UIThread;
}

<span class="highlight-comment">// Don't forget to unregister in unloaded!</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> PageUnloaded(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    Window.Current.CoreWindow.KeyDown -= KeyDown_UIThread;
}

<span class="highlight-comment">// The KeyDown handler runs on the UI thread...</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">async</span> <span class="highlight-keyword">void</span> KeyDown_UIThread(CoreWindow sender, KeyEventArgs args)
{
    args.Handled = <span class="highlight-keyword">true</span>;

    <span class="highlight-comment">// extract the data from the args before marshaling it to the</span>
    <span class="highlight-comment">// game loop thread</span>
    <span class="highlight-keyword">var</span> virtualKey = args.VirtualKey;

    <span class="highlight-keyword">await</span> animatedControl.RunOnGameLoopThreadAsync(() =&gt; KeyDown_GameLoopThread(virtualKey));
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> KeyDown_GameLoopThread(VirtualKey virtualKey)
{
    <span class="highlight-comment">// ...</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAHABA");</script></p><p>
          A more complete example can be found in the <a href="https://github.com/Microsoft/Win2D-Samples/blob/master/ExampleGallery/Shared/KeyboardInputExample.xaml.cs">KeyboardInputExample</a>
          in ExampleGallery.
        </p><h4>Threading Considerations</h4><p>
          CanvasAnimatedControl runs its game loop on a dedicated thread.  This
          thread is started in response to the control's Loaded event, and
          stopped in response to the control's Unloaded event.
        </p><p>
          The CreateResources event is raised on the UI thread.  Update and Draw
          are raised on the game loop thread.  The control ensures that Update
          and Draw will never run at the same time as CreateResources.
        </p><p>
          Update and Draw are only ever raised on the game loop thread and will
          never be raised simultaneously on different threads.
        </p><p>
          Input events are raised on the game loop thread and will never run
          simultaneously with the Update or Draw events.
        </p><p>
          Arbitrary code can be scheduled to execute on the game loop thread
          using <a href="M_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl_RunOnGameLoopThreadAsync.htm">RunOnGameLoopThreadAsync(DispatchedHandler)</a>.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm">Microsoft.Graphics.Canvas.UI.Xaml Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://github.com/Microsoft/Win2D/blob/master/LICENSE.txt" target="_blank">Copyright (c) Microsoft Corporation. All rights reserved.</a></p> </div></body></html>