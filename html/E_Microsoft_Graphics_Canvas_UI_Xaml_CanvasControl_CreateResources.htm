<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>CanvasControl.CreateResources Event</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="CreateResources event" /><meta name="System.Keywords" content="CanvasControl.CreateResources event" /><meta name="Microsoft.Help.F1" content="Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CreateResources" /><meta name="Microsoft.Help.Id" content="E:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CreateResources" /><meta name="Description" content="Hook this event to create any resources needed for your drawing." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Microsoft.Graphics.Canvas.UI.Xaml" /><meta name="file" content="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_CreateResources" /><meta name="guid" content="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_CreateResources" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Win2D documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Introduction.htm" title="Win2D documentation" tocid="roottoc">Win2D documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm" title="Microsoft.Graphics.Canvas.UI.Xaml" tocid="N_Microsoft_Graphics_Canvas_UI_Xaml">Microsoft.Graphics.Canvas.UI.Xaml</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl.htm" title="CanvasControl Class" tocid="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl">CanvasControl Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Events_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl.htm" title="CanvasControl Events" tocid="Events_T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl">CanvasControl Events</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_CreateResources.htm" title="CreateResources Event" tocid="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_CreateResources">CreateResources Event</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_Draw.htm" title="Draw Event" tocid="E_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_Draw">Draw Event</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">CanvasControl<span id="LST670927C6_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST670927C6_0?cpp=::|nu=.");</script>CreateResources Event</td></tr></table><span class="introStyle"></span><div class="summary">Hook this event to create any resources needed for your drawing.</div><p> </p><strong>Namespace:</strong> <a href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm">Microsoft.Graphics.Canvas.UI.Xaml</a><br /><strong>Assembly:</strong> Microsoft.Graphics.Canvas (in Microsoft.Graphics.Canvas.dll) Version: 0.0.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> event <span class="identifier">TypedEventHandler</span>&lt;<span class="identifier">CanvasControl</span>, <span class="identifier">CanvasCreateResourcesEventArgs</span>&gt; <span class="identifier">CreateResources</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Value</h4>Type: <a href="T_Windows_Foundation_TypedEventHandler_2.htm">Windows.Foundation<span id="LST670927C6_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST670927C6_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TypedEventHandler</a><span id="LST670927C6_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST670927C6_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl.htm">CanvasControl</a>, <a href="T_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs.htm">CanvasCreateResourcesEventArgs</a><span id="LST670927C6_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST670927C6_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
      The CreateResources event is raised once when the CanvasControl is first initialized, then
      again any time the resources need to be recreated, for instance if the graphics device is lost.
      </p><h3>On loading resources outside of CreateResources</h3><p>       
      Normally, apps are expected to use the CreateResources handler for creating controls' resources, 
      so that device dependent resources are re-recreated as necessary if the device is lost. This includes 
      resources that are loaded asynchronously. For asynchronous resource loading, controls are encouraged to 
      use <a href="M_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_TrackAsyncAction.htm">TrackAsyncAction(IAsyncAction)</a> 
      with CreateResources to ensure correct behavior.
      </p><p>
      All of this works well for cases where all resources are loaded at startup only.
      </p><p>     
      But, what about apps which need to load some resources at startup, and some other 
      resources later? For example, consider a game with different levels, and the levels need 
      different graphical assets. Win2D doesn't have something built-in with CreateResources to 
      enable this- an app cannot manually tell a control, "Re-issue CreateResources now, so 
      that I can load different assets from before". However, the building blocks are there to make 
      this work, and allow very good flexibility for how and when the resources are loaded, 
      and be robust with respect to lost device.
      </p><p>
      Really, what an app wants to do in this case, is have a custom LoadResourcesForLevelAsync method, 
      a 'custom' CreateResources-launched task, like this:
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAFABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAFABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAFABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">async</span> Task LoadResourcesForLevelAsync(CanvasControl resourceCreator, <span class="highlight-keyword">int</span> level)
{
    levelBackground = <span class="highlight-keyword">await</span> CanvasBitmap.LoadAsync(resourceCreator, ...);
    levelThingie = <span class="highlight-keyword">await</span> CanvasBitmap.LoadAsync(resourceCreator, ...);
    <span class="highlight-comment">// etc.</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAFABA");</script></p>
      The app needs to load some of its resources after CreateResources is completed. In particular, 
      the app will issue the level load after CreateResources has completed- e.g., 
      from its Draw handler. In the code below, the app's Draw handler controls the progress of its 
      level-loading Task. 
      <p /><p>
      To make CreateResources work in this situation, and be robust against lost devices, an app needs to do four things:
      <ol><li>
      Track when LoadResourcesForLevelAsync is in progress.
      </li><li>
      Allow Win2D to handle any exceptions (in particular, device lost) that the app does't know how to handle.
      </li><li>
      If Win2D raises the CreateResources event to recover from a lost device while 
      LoadResourcesForLevelAsync is in progress, your CreateResources handler should cancel that task.
      </li><li>
      If Win2D raises CreateResources to recover from a lost device after you have finished loading data 
      using LoadResourcesForLevelAsync, your CreateResources handler must reload that custom data as well as its usual global resources.
      </li></ol></p><p> 
      Using a CreateResources handler called CanvasControl_CreateResources, and the LoadResourcesForLevelAsync method shown above, 
      here is a complete implementation that handles all four requirements:
      </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">int</span>? currentLevel, wantedLevel;

<span class="highlight-comment">// This implements requirement #1.</span>
Task levelLoadTask;


<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> LoadNewLevel(<span class="highlight-keyword">int</span> newLevel)
{
    Debug.Assert(levelLoadTask == <span class="highlight-keyword">null</span>);
    wantedLevel = newLevel;
    levelLoadTask = LoadResourcesForLevelAsync(canvasControl, newLevel);
}

<span class="highlight-keyword">void</span> CanvasControl_CreateResources(CanvasControl sender,
                                   CanvasCreateResourcesEventArgs args)
{
    <span class="highlight-comment">// Synchronous resource creation, for globally-required resources goes here:</span>
    x = <span class="highlight-keyword">new</span> CanvasRenderTarget(sender, ...);
    y = <span class="highlight-keyword">new</span> CanvasRadialGradientBrush(sender, ...);
    <span class="highlight-comment">// etc.</span>

    args.TrackAsyncAction(CreateResourcesAsync(sender).AsAsyncAction());
}  

<span class="highlight-keyword">async</span> Task CreateResourcesAsync(CanvasControl sender)
{
    <span class="highlight-comment">// If there is a previous load in progress, stop it, and</span>
    <span class="highlight-comment">// swallow any stale errors. This implements requirement #3.</span>
    <span class="highlight-keyword">if</span> (levelLoadTask != <span class="highlight-keyword">null</span>)
    {
        levelLoadTask.AsAsyncAction().Cancel();
        <span class="highlight-keyword">try</span> { <span class="highlight-keyword">await</span> levelLoadTask; } <span class="highlight-keyword">catch</span> { }
        levelLoadTask = <span class="highlight-keyword">null</span>;
    }

    <span class="highlight-comment">// Unload resources used by the previous level here.</span>

    <span class="highlight-comment">// Asynchronous resource loading, for globally-required resources goes here:</span>
    baz = <span class="highlight-keyword">await</span> CanvasBitmap.LoadAsync(sender, ...);
    qux = <span class="highlight-keyword">await</span> CanvasBitmap.LoadAsync(sender, ...);
    <span class="highlight-comment">// etc.</span>

    <span class="highlight-comment">// If we are already in a level, reload its per-level resources.</span>
    <span class="highlight-comment">// This implements requirement #4.</span>
    <span class="highlight-keyword">if</span> (wantedLevel.HasValue)
    {
        LoadNewLevel(wantedLevel.Value);
    }
}

<span class="highlight-comment">// Because of how this is designed to throw an exception, this must only </span>
<span class="highlight-comment">// ever be called from a Win2D event handler.</span>
<span class="highlight-keyword">bool</span> IsLoadInProgress()
{
    <span class="highlight-comment">// No loading task?</span>
    <span class="highlight-keyword">if</span> (levelLoadTask == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;

    <span class="highlight-comment">// Loading task is still running?</span>
    <span class="highlight-keyword">if</span> (!levelLoadTask.IsCompleted)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;

    <span class="highlight-comment">// Query the load task results and re-throw any exceptions</span>
    <span class="highlight-comment">// so Win2D can see them. This implements requirement #2.</span>
    <span class="highlight-keyword">try</span>
    {
        levelLoadTask.Wait();
    }
    <span class="highlight-keyword">catch</span> (AggregateException aggregateException)
    {
        <span class="highlight-comment">// .NET async tasks wrap all errors in an AggregateException.</span>
        <span class="highlight-comment">// We unpack this so Win2D can directly see any lost device errors.</span>
        aggregateException.Handle(exception =&gt; { <span class="highlight-keyword">throw</span> exception; });
    }
    <span class="highlight-keyword">finally</span>
    {
        levelLoadTask = <span class="highlight-keyword">null</span>;
    }

    currentLevel = wantedLevel;
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
}


<span class="highlight-keyword">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args)
{
    <span class="highlight-keyword">if</span> (IsLoadInProgress())
    {
        DrawLoadingScreen();
    }
    <span class="highlight-keyword">else</span>
    {
        DrawCurrentLevel(currentLevel);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABA");</script></p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl.htm">CanvasControl Class</a></div><div class="seeAlsoStyle"><a href="N_Microsoft_Graphics_Canvas_UI_Xaml.htm">Microsoft.Graphics.Canvas.UI.Xaml Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://github.com/Microsoft/Win2D/blob/master/LICENSE.txt" target="_blank">Copyright (c) Microsoft Corporation. All rights reserved.</a></p> </div></body></html>