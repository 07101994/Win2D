<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Quaternion">
      <summary>A four dimensional vector, used to represent a rotation.</summary>
      <remarks>Quaternions can efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2). They are typically used for smooth interpolation between two angles, and for avoiding the gimbal lock problem that can occur with Euler angles.</remarks>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calculates the length of a quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divides each component of a quaternion by the length of the quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Calculates the conjugate of a quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Calculates the inverse of a quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Creates a quaternion from a vector and an angle to rotate about the vector.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a quaternion from specified yaw, pitch, and roll angles.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Creates a quaternion from a rotation matrix.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calculates the dot product of two quaternions.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Linearly interpolates between two quaternions.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatenates two quaternions; the result represents the first rotation followed by the second rotation.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adds two quaternions.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Multiplies a quaternion by another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divides a quaternion by another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adds two quaternions.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Multiplies a quaternion by another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divides a quaternion by another quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Determines whether two instances of Quaternion are equal.</summary>
      <remarks>Uses an exact floating point equality comparison, which is not advised if the values being compared are the result of computations which could have introduced floating point precision errors.</remarks>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Determines whether two instances of Quaternion are not equal.</summary>
      <remarks>Uses an exact floating point equality comparison, which is not advised if the values being compared are the result of computations which could have introduced floating point precision errors.</remarks>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Determines whether the specified Quaternion is equal to the Quaternion.</summary>
      <remarks>Uses an exact floating point equality comparison, which is not advised if the values being compared are the result of computations which could have introduced floating point precision errors.</remarks>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the Quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Returns a String that represents the current Quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Implicit(System.Numerics.Quaternion)~Microsoft.Graphics.Canvas.Numerics.Quaternion">
      <summary>Converts a System.Numerics.Quaternion to a Microsoft.Graphics.Canvas.Numerics.Quaternion.</summary>
      <remarks>This allows application code to use the rich System.Numerics math types, then pass these objects directly to WinRT APIs that use the WinRT structs from Microsoft.Graphics.Canvas.Numerics.</remarks>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Implicit(Microsoft.Graphics.Canvas.Numerics.Quaternion)~System.Numerics.Quaternion">
      <summary>Converts a Microsoft.Graphics.Canvas.Numerics.Quaternion to a System.Numerics.Quaternion.</summary>
      <remarks>This allows application code to use the rich System.Numerics math types, and assign to these objects directly from the return values of WinRT APIs that use the WinRT structs from Microsoft.Graphics.Canvas.Numerics.</remarks>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>X value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Y value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Z value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Rotation component of the quaternion.</summary>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Returns a quaternion representing no rotation.</summary>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Checks whether this is an identity (no rotation) quaternion.</summary>
    </member>
  </members>
</doc>
