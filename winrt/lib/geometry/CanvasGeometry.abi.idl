// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasGeometry;

    [version(VERSION), uuid(74EA89FA-C87C-4D0D-9057-2743B8DB67EE), exclusiveto(CanvasGeometry)]
    interface ICanvasGeometry : IInspectable
        requires Windows.Foundation.IClosable
    {
        ///////////////////////////////////////////////////////////////////////
        // The methods below return geometries.
        [overload("CombineWith")]
        HRESULT CombineWith(
            [in] CanvasGeometry* otherGeometry,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 otherGeometryTransform,
            [in] CanvasGeometryCombine combine,
            [out, retval] CanvasGeometry** geometry);

        [overload("CombineWith"), default_overload]
        HRESULT CombineWithUsingFlatteningTolerance(
            [in] CanvasGeometry* otherGeometry,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 otherGeometryTransform,
            [in] CanvasGeometryCombine combine,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Stroke
        [overload("Stroke")]
        HRESULT Stroke(
            [in] float strokeWidth,
            [out, retval] CanvasGeometry** geometry);

        [overload("Stroke"), default_overload]
        HRESULT StrokeWithStrokeStyle(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] CanvasGeometry** geometry);

        [overload("Stroke"), default_overload]
        HRESULT StrokeWithAllOptions(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Outline
        [overload("Outline")]
        HRESULT Outline(
            [out, retval] CanvasGeometry** geometry);

        [overload("Outline"), default_overload]
        HRESULT OutlineWithTransformAndFlatteningTolerance(
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Simplify
        [overload("Simplify")]
        HRESULT Simplify(
            [in] CanvasGeometrySimplification simplification,
            [out, retval] CanvasGeometry** geometry);

        [overload("Simplify"), default_overload]
        HRESULT SimplifyWithTransformAndFlatteningTolerance(
            [in] CanvasGeometrySimplification simplification,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        ///////////////////////////////////////////////////////////////////////
        // The methods below return primitive types.

        // CompareWith
        // This method uses the default flattening tolerance.
        [overload("CompareWith")]
        HRESULT CompareWith(
            [in] CanvasGeometry* otherGeometry,
            [out, retval] CanvasGeometryRelation* relation);

        [overload("CompareWith"), default_overload]
        HRESULT CompareWithUsingTransformAndFlatteningTolerance(
            [in] CanvasGeometry* otherGeometry,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 otherGeometryTransform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometryRelation* relation);

        // ComputeArea
        [overload("ComputeArea")]
        HRESULT ComputeArea(
            [out, retval] float* area);

        [overload("ComputeArea"), default_overload]
        HRESULT ComputeAreaWithTransformAndFlatteningTolerance(
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] float* area);

        // ComputePathLength
        [overload("ComputePathLength")]
        HRESULT ComputePathLength(
            [out, retval] float* length);

        [overload("ComputePathLength"), default_overload]
        HRESULT ComputePathLengthWithTransformAndFlatteningTolerance(
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] float* length);

        // ComputePointOnPath
        [overload("ComputePointOnPath")]
        HRESULT ComputePointOnPath(
            [in] float distance,
            [out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* point);

        [overload("ComputePointOnPath"), default_overload]
        HRESULT ComputePointOnPathWithTangent(
            [in] float distance,
            [out] Microsoft.Graphics.Canvas.Numerics.Vector2* tangent,
            [out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* point);

        [overload("ComputePointOnPath"), default_overload]
        HRESULT ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(
            [in] float length,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out] Microsoft.Graphics.Canvas.Numerics.Vector2* tangent,
            [out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* point);

        // FillContainsPoint
        [overload("FillContainsPoint")]
        HRESULT FillContainsPoint(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [out, retval] boolean* containsPoint);

        [overload("FillContainsPoint"), default_overload]
        HRESULT FillContainsPointWithTransformAndFlatteningTolerance(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] boolean* containsPoint);

        // ComputeBounds
        [overload("ComputeBounds")]
        HRESULT ComputeBounds(
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeBounds"), default_overload]
        HRESULT ComputeBoundsWithTransform(
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [out, retval] Windows.Foundation.Rect* bounds);

        // ComputeStrokeBounds
        [overload("ComputeStrokeBounds")]
        HRESULT ComputeStrokeBounds(
            [in] float strokeWidth,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeStrokeBounds"), default_overload]
        HRESULT ComputeStrokeBoundsWithStrokeStyle(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeStrokeBounds"), default_overload]
        HRESULT ComputeStrokeBoundsWithAllOptions(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] Windows.Foundation.Rect* bounds);

        // StrokeContainsPoint
        [overload("StrokeContainsPoint")]
        HRESULT StrokeContainsPoint(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] float strokeWidth,
            [out, retval] boolean* containsPoint);

        [overload("StrokeContainsPoint"), default_overload]
        HRESULT StrokeContainsPointWithStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] boolean* containsPoint);

        [overload("StrokeContainsPoint"), default_overload]
        HRESULT StrokeContainsPointWithAllOptions(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] boolean* containsPoint);
    }

    [version(VERSION), uuid(D94E33CF-CD59-46F2-8DF4-55066AABFD56), exclusiveto(CanvasGeometry)]
    interface ICanvasGeometryStatics : IInspectable
    {
        [overload("CreateRectangle"), default_overload]
        HRESULT CreateRectangle(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Rect rect,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateRectangle")]
        HRESULT CreateRectangleAtCoords(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [out, retval] CanvasGeometry** geometry); 

        [overload("CreateRoundedRectangle"), default_overload]
        HRESULT CreateRoundedRectangle(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateRoundedRectangle")]
        HRESULT CreateRoundedRectangleAtCoords(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateEllipse"), default_overload]
        HRESULT CreateEllipse(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateEllipse")]
        HRESULT CreateEllipseAtCoords(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        // Docs should specify that this interops to ID2D1EllipseGeometry.
        [overload("CreateCircle"), default_overload]
        HRESULT CreateCircle(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateCircle")]
        HRESULT CreateCircleAtCoords(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float radius,
            [out, retval] CanvasGeometry** geometry);

        HRESULT CreatePath(
            [in] CanvasPathBuilder* pathBuilder,
            [out, retval] CanvasGeometry** geometry);

        [propget] HRESULT DefaultFlatteningTolerance([out, retval] float* value);
    }

    [version(VERSION), static(ICanvasGeometryStatics, VERSION)]
    runtimeclass CanvasGeometry
    {
        [default] interface ICanvasGeometry;
    }

}
