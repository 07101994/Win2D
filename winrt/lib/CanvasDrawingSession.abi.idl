// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasDrawingSession;

    //
    // CanvasDrawingSession needs to be activatable in order to support interop
    // (so we can have a ICanvasFactoryNative on the activation factory).  An
    // empty statics interface provides this.
    //
    [version(VERSION), uuid(21729CFC-1D7A-434E-B19B-8B15306B0DA8), exclusiveto(CanvasDrawingSession)]
    interface ICanvasDrawingSessionStatics : IInspectable
    {
    }

    [version(VERSION), uuid(F60AFD09-E623-4BE0-B750-578AA920B1DB), exclusiveto(CanvasDrawingSession)]
    interface ICanvasDrawingSession : IInspectable
        requires Windows.Foundation.IClosable, ICanvasResourceCreator
    {
        HRESULT Clear([in] Windows.UI.Color color);

        // 
        // DrawImage
        // 

        // TODO #2104: consider overloads for different interpolation and composite modes 
        // as well as overload with rectangle for cutting image 

        [overload("DrawImage")]
        HRESULT DrawImage(
            [in] ICanvasImage* image);

        [overload("DrawImage")]
        HRESULT DrawImageWithOffset(
            [in] ICanvasImage* image,
            [in] Windows.Foundation.Point offset);

        //
        // DrawLine
        //
        
        [overload("DrawLine")]
        HRESULT DrawLine(
            [in] Windows.Foundation.Point point0,
            [in] Windows.Foundation.Point point1,
            [in] ICanvasBrush* brush);

        [overload("DrawLine")]
        HRESULT DrawLineWithStrokeWidth(
            [in] Windows.Foundation.Point point0,
            [in] Windows.Foundation.Point point1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawLine")]
        HRESULT DrawLineWithStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Point point0,
            [in] Windows.Foundation.Point point1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // DrawRectangle
        //

        [overload("DrawRectangle")]
        HRESULT DrawRectangle(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleWithStrokeWidth(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleWithStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillRectangle
        //

        HRESULT FillRectangle(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush);

        //
        // DrawRoundedRectangle
        //

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangle(
            [in] CanvasRoundedRectangle roundedRectangle,
            [in] ICanvasBrush* brush);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleWithStrokeWidth(
            [in] CanvasRoundedRectangle roundedRectangle,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleWithStrokeWidthAndStrokeStyle(
            [in] CanvasRoundedRectangle roundedRectangle,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillRoundedRectangle
        //

        HRESULT FillRoundedRectangle(
            [in] CanvasRoundedRectangle roundedRectangle,
            [in] ICanvasBrush* brush);

        //
        // DrawEllipse
        //

        [overload("DrawEllipse")]
        HRESULT DrawEllipse(
            [in] CanvasEllipse ellipse,
            [in] ICanvasBrush* brush);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseWithStrokeWidth(
            [in] CanvasEllipse ellipse,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseWithStrokeWidthAndStrokeStyle(
            [in] CanvasEllipse ellipse,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillEllipse
        //

        HRESULT FillEllipse(
            [in] CanvasEllipse ellipse,
            [in] ICanvasBrush* brush);

        //
        // DrawText
        //

        [overload("DrawText")]
        HRESULT DrawTextAtPoint(
            [in] HSTRING text,
            [in] Windows.Foundation.Point point,
            [in] ICanvasBrush* brush);

        [overload("DrawText")]
        HRESULT DrawTextAtPointWithFormat(
            [in] HSTRING text,
            [in] Windows.Foundation.Point point,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        [overload("DrawText"), default_overload]
        HRESULT DrawText(
            [in] HSTRING text,
            [in] Windows.Foundation.Rect rectangle,
            [in] ICanvasBrush* brush);

        [overload("DrawText"), default_overload]
        HRESULT DrawTextWithFormat(
            [in] HSTRING text,
            [in] Windows.Foundation.Rect rectangle,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        //
        // State properties
        //

        [propget] HRESULT Antialiasing([out, retval] CanvasAntialiasing* value);
        [propput] HRESULT Antialiasing([in] CanvasAntialiasing value);

        [propget] HRESULT Blend([out, retval] CanvasBlend* value);
        [propput] HRESULT Blend([in] CanvasBlend value);

        [propget] HRESULT TextAntialiasing([out, retval] CanvasTextAntialiasing* value);
        [propput] HRESULT TextAntialiasing([in] CanvasTextAntialiasing value);

        [propget] HRESULT Transform([out, retval] Microsoft.Graphics.Canvas.Numerics.Matrix3x2* value);
        [propput] HRESULT Transform([in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 value);

        [propget] HRESULT Units([out, retval] CanvasUnits* value);
        [propput] HRESULT Units([in] CanvasUnits value);
    };

    [version(VERSION), static(ICanvasDrawingSessionStatics, VERSION)]
    runtimeclass CanvasDrawingSession
    {
        [default] interface ICanvasDrawingSession;
    };
}
