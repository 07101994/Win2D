// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    //
    // CanvasBitmap
    //

    runtimeclass CanvasBitmap;
    runtimeclass CanvasDevice;

    [version(VERSION), uuid(F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4), exclusiveto(CanvasBitmap)]
    interface ICanvasBitmapFactory : IInspectable
    {
    }

    [version(VERSION), uuid(C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE), exclusiveto(CanvasBitmap)]
    interface ICanvasBitmap : IInspectable
        requires ICanvasImage,
                 Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface
    {
        [propget]
        HRESULT SizeInPixels([out, retval] Windows.Foundation.Size* size);

        [propget]
        HRESULT Size([out, retval] Windows.Foundation.Size* size);

        [propget]
        HRESULT Bounds([out, retval] Windows.Foundation.Rect* bounds);
    };

    [version(VERSION), uuid(C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC), exclusiveto(CanvasBitmap)]
    interface ICanvasBitmapStatics : IInspectable
    {
        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11Surface(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromDirect3D11Surface"), default_overload]
        HRESULT CreateFromDirect3D11SurfaceWithAlpha(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11SurfaceWithDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] float dpi,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11SurfaceWithAlphaAndDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] CanvasAlphaBehavior alpha,
            [in] float dpi,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromBytes")]
        HRESULT CreateFromBytes(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 byteCount,
            [in, size_is(byteCount)] BYTE* bytes,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromBytes")]
        HRESULT CreateFromBytesWithDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 byteCount,
            [in, size_is(byteCount)] BYTE* bytes,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [in] CanvasAlphaBehavior alpha,
            [in] float dpi,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromColors")]
        HRESULT CreateFromColors(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 colorCount,
            [in, size_is(colorCount)] Windows.UI.Color* colors,
            [in] float width,
            [in] float height,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] CanvasBitmap** bitmap);

        [overload("CreateFromColors")]
        HRESULT CreateFromColorsWithDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 colorCount,
            [in, size_is(colorCount)] Windows.UI.Color* colors,
            [in] float width,
            [in] float height,
            [in] CanvasAlphaBehavior alpha,
            [in] float dpi,
            [out, retval] CanvasBitmap** bitmap);

        [overload("LoadAsync")]
        HRESULT LoadAsyncFromHstring(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] HSTRING fileName,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasBitmap*>** canvasBitmap);

        [overload("LoadAsync")]
        HRESULT LoadAsyncFromHstringWithAlpha(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] HSTRING fileName,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasBitmap*>** canvasBitmap);

        [overload("LoadAsync"), default_overload]
        HRESULT LoadAsyncFromUri(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Uri* uri,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasBitmap*>** canvasBitmap);

        [overload("LoadAsync"), default_overload]
        HRESULT LoadAsyncFromUriWithAlpha(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Uri* uri,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasBitmap*>** canvasBitmap);
    };

    [version(VERSION), composable(ICanvasBitmapFactory, public, VERSION), threading(both), marshaling_behavior(agile), static(ICanvasBitmapStatics, VERSION)]
    runtimeclass CanvasBitmap : Windows.UI.Xaml.DependencyObject
    {
        [default] interface ICanvasBitmap;
    }

    //
    // CanvasRenderTarget
    //
    runtimeclass CanvasRenderTarget;
    runtimeclass CanvasDrawingSession;

    [version(VERSION), uuid(620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7), exclusiveto(CanvasRenderTarget)]
    interface ICanvasRenderTargetFactory : IInspectable
    {
        //
        // Creates a renderable bitmap with some defaults- a format of B8G8R8A8
        // UNORM, premultiplied alpha, 96x96 DPI, and the render target view 
        // bind flag as well as shader resource view. The D2D resource is
        // flagged as TARGET, meaning this bitmap can be used both as a source
        // and as a target.
        //

        HRESULT Create(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Size size,
            [out, retval] CanvasRenderTarget** renderTarget);

        HRESULT CreateWithWidthAndHeight(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,
            [out, retval] CanvasRenderTarget** renderTarget);

        HRESULT CreateWithWidthAndHeightAndFormat(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [out, retval] CanvasRenderTarget** renderTarget);

        HRESULT CreateWithWidthAndHeightAndFormatAndAlpha(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] CanvasRenderTarget** renderTarget);

        HRESULT CreateWithWidthAndHeightAndFormatAndAlphaAndDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [in] CanvasAlphaBehavior alpha,
            [in] float dpi,
            [out, retval] CanvasRenderTarget** renderTarget);
    };

    [version(VERSION), uuid(C7D1FE37-DD57-45D7-BCC1-15625A21E8D5), exclusiveto(CanvasRenderTarget)]
    interface ICanvasRenderTargetStatics : IInspectable
    {
        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11Surface(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [out, retval] CanvasRenderTarget** bitmap);

        [overload("CreateFromDirect3D11Surface"), default_overload]
        HRESULT CreateFromDirect3D11SurfaceWithAlpha(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] CanvasAlphaBehavior alpha,
            [out, retval] CanvasRenderTarget** bitmap);

        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11SurfaceWithDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] float dpi,
            [out, retval] CanvasRenderTarget** bitmap);

        [overload("CreateFromDirect3D11Surface")]
        HRESULT CreateFromDirect3D11SurfaceWithAlphaAndDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface* surface,
            [in] CanvasAlphaBehavior alpha,
            [in] float dpi,
            [out, retval] CanvasRenderTarget** bitmap);
    }

    [version(VERSION), uuid(2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B), exclusiveto(CanvasRenderTarget)]
    interface ICanvasRenderTarget : IInspectable
    {
        HRESULT CreateDrawingSession([out, retval] CanvasDrawingSession** drawingSession);
    };

    [version(VERSION), threading(both), marshaling_behavior(agile), activatable(ICanvasRenderTargetFactory, VERSION), static(ICanvasRenderTargetStatics, VERSION)]
    runtimeclass CanvasRenderTarget : CanvasBitmap
    {
        [default] interface ICanvasRenderTarget;
        interface ICanvasResourceCreator;
    }
}
