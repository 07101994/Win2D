// Copyright (c) Microsoft Corporation.  All rights reserved

import "inspectable.idl";
import "Windows.Foundation.idl";

#include "../version.h"

namespace Microsoft.Graphics.Canvas
{
    runtimeclass DirectX11Device;
    runtimeclass DirectX11Surface;

    //
    // GraphicsResourceFormat -- this is a WinRT projection of DXGI_FORMAT
    //
    [version(VERSION)]
    typedef enum GraphicsResourceFormat
    {
        Unknown	                    = 0,
        R32G32B32A32_TYPELESS       = 1,
        R32G32B32A32_FLOAT          = 2,
        R32G32B32A32_UINT           = 3,
        R32G32B32A32_SINT           = 4,
        R32G32B32_TYPELESS          = 5,
        R32G32B32_FLOAT             = 6,
        R32G32B32_UINT              = 7,
        R32G32B32_SINT              = 8,
        R16G16B16A16_TYPELESS       = 9,
        R16G16B16A16_FLOAT          = 10,
        R16G16B16A16_UNORM          = 11,
        R16G16B16A16_UINT           = 12,
        R16G16B16A16_SNORM          = 13,
        R16G16B16A16_SINT           = 14,
        R32G32_TYPELESS             = 15,
        R32G32_FLOAT                = 16,
        R32G32_UINT                 = 17,
        R32G32_SINT                 = 18,
        R32G8X24_TYPELESS           = 19,
        D32_FLOAT_S8X24_UINT        = 20,
        R32_FLOAT_X8X24_TYPELESS    = 21,
        X32_TYPELESS_G8X24_UINT     = 22,
        R10G10B10A2_TYPELESS        = 23,
        R10G10B10A2_UNORM           = 24,
        R10G10B10A2_UINT            = 25,
        R11G11B10_FLOAT             = 26,
        R8G8B8A8_TYPELESS           = 27,
        R8G8B8A8_UNORM              = 28,
        R8G8B8A8_UNORM_SRGB         = 29,
        R8G8B8A8_UINT               = 30,
        R8G8B8A8_SNORM              = 31,
        R8G8B8A8_SINT               = 32,
        R16G16_TYPELESS             = 33,
        R16G16_FLOAT                = 34,
        R16G16_UNORM                = 35,
        R16G16_UINT                 = 36,
        R16G16_SNORM                = 37,
        R16G16_SINT                 = 38,
        R32_TYPELESS                = 39,
        D32_FLOAT                   = 40,
        R32_FLOAT                   = 41,
        R32_UINT                    = 42,
        R32_SINT                    = 43,
        R24G8_TYPELESS              = 44,
        D24_UNORM_S8_UINT           = 45,
        R24_UNORM_X8_TYPELESS       = 46,
        X24_TYPELESS_G8_UINT        = 47,
        R8G8_TYPELESS               = 48,
        R8G8_UNORM                  = 49,
        R8G8_UINT                   = 50,
        R8G8_SNORM                  = 51,
        R8G8_SINT                   = 52,
        R16_TYPELESS                = 53,
        R16_FLOAT                   = 54,
        D16_UNORM                   = 55,
        R16_UNORM                   = 56,
        R16_UINT                    = 57,
        R16_SNORM                   = 58,
        R16_SINT                    = 59,
        R8_TYPELESS                 = 60,
        R8_UNORM                    = 61,
        R8_UINT                     = 62,
        R8_SNORM                    = 63,
        R8_SINT                     = 64,
        A8_UNORM                    = 65,
        R1_UNORM                    = 66,
        R9G9B9E5_SHAREDEXP          = 67,
        R8G8_B8G8_UNORM             = 68,
        G8R8_G8B8_UNORM             = 69,
        BC1_TYPELESS                = 70,
        BC1_UNORM                   = 71,
        BC1_UNORM_SRGB              = 72,
        BC2_TYPELESS                = 73,
        BC2_UNORM                   = 74,
        BC2_UNORM_SRGB              = 75,
        BC3_TYPELESS                = 76,
        BC3_UNORM                   = 77,
        BC3_UNORM_SRGB              = 78,
        BC4_TYPELESS                = 79,
        BC4_UNORM                   = 80,
        BC4_SNORM                   = 81,
        BC5_TYPELESS                = 82,
        BC5_UNORM                   = 83,
        BC5_SNORM                   = 84,
        B5G6R5_UNORM                = 85,
        B5G5R5A1_UNORM              = 86,
        B8G8R8A8_UNORM              = 87,
        B8G8R8X8_UNORM              = 88,
        R10G10B10_XR_BIAS_A2_UNORM  = 89,
        B8G8R8A8_TYPELESS           = 90,
        B8G8R8A8_UNORM_SRGB         = 91,
        B8G8R8X8_TYPELESS           = 92,
        B8G8R8X8_UNORM_SRGB         = 93,
        BC6H_TYPELESS               = 94,
        BC6H_UF16                   = 95,
        BC6H_SF16                   = 96,
        BC7_TYPELESS                = 97,
        BC7_UNORM                   = 98,
        BC7_UNORM_SRGB              = 99,
        AYUV                        = 100,
        Y410                        = 101,
        Y416                        = 102,
        NV12                        = 103,
        P010                        = 104,
        P016                        = 105,
        OPAQUE_420                  = 106,
        YUY2                        = 107,
        Y210                        = 108,
        Y216                        = 109,
        NV11                        = 110,
        AI44                        = 111,
        IA44                        = 112,
        P8                          = 113,
        A8P8                        = 114,
        B4G4R4A4_UNORM              = 115,
    } GraphicsResourceFormat;


    //
    // DirectX11MultisampleDescription -- this is a WinRT projection of
    // DXGI_SAMPLE_DESC
    //
    [version(VERSION)]
    typedef struct DirectX11MultisampleDescription
    {
        UINT Count;
        UINT Quality;
    } DirectX11MultisampleDescription;


    //
    // DirectX11SurfaceDescription -- this is a WinRT projection of
    // DXGI_SURFACE_DESC.
    //
    [version(VERSION)]
    typedef struct DirectX11SurfaceDescription
    {
        UINT Width;
        UINT Height;
        GraphicsResourceFormat Format;
        DirectX11MultisampleDescription MultisampleDescription;
    } DirectX11SurfaceDescription;


    //
    // DirectX11Usage -- this is a WinRT projection of D3D11_USAGE
    //
    [version(VERSION)]
    typedef enum DirectX11Usage
    {
        Default = 0,            // D3D11_USAGE_DEFAULT
        Immutable = 1,          // D3D11_USAGE_IMMUTABLE
        Dynamic = 2,            // D3D11_USAGE_DYNAMIC
        Staging = 3             // D3D11_USAGE_STAGING
    } DirectX11Usage;


    //
    // DirectX11Bindings -- this is a WinRT projection of D3D11_BIND_FLAG
    //
    // WinRT bans 'Flags' as an enum name suffix.
    //
    [version(VERSION), flags]
    typedef enum DirectX11Bindings
    {
        VertexBuffer    = 0x1,   // D3D11_BIND_VERTEX_BUFFER
        IndexBuffer     = 0x2,   // D3D11_BIND_INDEX_BUFFER
        ConstantBuffer  = 0x4,   // D3D11_BIND_CONSTANT_BUFFER
        ShaderResource  = 0x8,   // D3D11_BIND_SHADER_RESOURCE
        StreamOutput    = 0x10,  // D3D11_BIND_STREAM_OUTPUT
        RenderTarget    = 0x20,  // D3D11_BIND_RENDER_TARGET
        DepthStencil    = 0x40,  // D3D11_BIND_DEPTH_STENCIL
        UnorderedAccess = 0x80,  // D3D11_BIND_UNORDERED_ACCESS
        Decoder         = 0x200, // D3D11_BIND_DECODER
        VideoEncoder    = 0x400  // D3D11_BIND_VIDEO_ENCODER
    } DirectX11Bindings;

    //
    // Error codes
    //
    [version(VERSION)]
    typedef enum GraphicsErrorCode
    {
        DeviceHung                              = (int) 0x887A0006, // DXGI_ERROR_DEVICE_HUNG
        DeviceRemoved                           = (int) 0x887A0005, // DXGI_ERROR_DEVICE_REMOVED
        DeviceReset                             = (int) 0x887A0007, // DXGI_ERROR_DEVICE_RESET
        DriverInternalError                     = (int) 0x887A0020, // DXGI_ERROR_DRIVER_INTERNAL_ERROR
        FrameStatisticsDisjoint                 = (int) 0x887A000B, // DXGI_ERROR_FRAME_STATISTICS_DISJOINT
        GraphicsVidpnSourceInUse                = (int) 0x887A000C, // DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE
        InvalidCall                             = (int) 0x887A0001, // DXGI_ERROR_INVALID_CALL
        MoreData                                = (int) 0x887A0003, // DXGI_ERROR_MORE_DATA
        Nonexclusive                            = (int) 0x887A0021, // DXGI_ERROR_NONEXCLUSIVE
        NotCurrentlyAvailable                   = (int) 0x887A0022, // DXGI_ERROR_NOT_CURRENTLY_AVAILABLE
        NotFound                                = (int) 0x887A0002, // DXGI_ERROR_NOT_FOUND
        RemoteClientDisconnected                = (int) 0x887A0023, // DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED
        RemoteOutOfMemory                       = (int) 0x887A0024, // DXGI_ERROR_REMOTE_OUTOFMEMORY
        WasStillDrawing                         = (int) 0x887A000A, // DXGI_ERROR_WAS_STILL_DRAWING
        Unsupported                             = (int) 0x887A0004, // DXGI_ERROR_UNSUPPORTED
        AccessLost                              = (int) 0x887A0026, // DXGI_ERROR_ACCESS_LOST
        WaitTimeout                             = (int) 0x887A0027, // DXGI_ERROR_WAIT_TIMEOUT
        SessionDisconnected                     = (int) 0x887A0028, // DXGI_ERROR_SESSION_DISCONNECTED
        RestrictToOutputStale                   = (int) 0x887A0029, // DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE
        CannotProtectContent                    = (int) 0x887A002A, // DXGI_ERROR_CANNOT_PROTECT_CONTENT
        AccessDenied                            = (int) 0x887A002B, // DXGI_ERROR_ACCESS_DENIED
        NameAlreadyExists                       = (int) 0x887A002C, // DXGI_ERROR_NAME_ALREADY_EXISTS        
        TooManyUniqueStateObjects               = (int) 0x887C0001, // D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS
        FileNotFound                            = (int) 0x887C0002, // D3D11_ERROR_FILE_NOT_FOUND
        TooManyUniqueViewObjects                = (int) 0x887C0003, // D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS
        DeferredContextMapWithoutInitialDiscard = (int) 0x887C0004, // D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD
    } GraphicsErrorCode;

    //
    // runtimeclass: DirectX11Device
    //
    // This represents an IDXGIDevice and can be used to interop between
    // components that need to exchange IDXGIDevice references.
    //

    [version(VERSION), 
     uuid(A37624AB-8D5F-4650-9D3E-9EAE3D9BC670), 
     exclusiveto(DirectX11Device)]
    interface IDirectX11Device : IInspectable
        requires Windows.Foundation.IClosable
    {
        //
        // Calls IDXGIDevice3::Trim()
        //
        HRESULT Trim();
    }

    [version(VERSION), marshaling_behavior(agile)]
    runtimeclass DirectX11Device
    {
        [default] interface IDirectX11Device;
    }


    //
    // runtimeclass: DirectX11Surface
    //
    // This represents an IDXGISurface and can be used to interop between
    // components that need to exchange IDXGISurface references.
    //

    [version(VERSION),
     uuid(0BF4A146-13C1-4694-BEE3-7ABF15EAF586),
     exclusiveto(DirectX11Surface)]
    interface IDirectX11Surface : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget] HRESULT Description(
            [out, retval] DirectX11SurfaceDescription* value);

        [propget] HRESULT EvictionPriority(
            [out, retval] UINT32* value);

        [propput] HRESULT EvictionPriority(
            [in] UINT32 value);
    }

    [version(VERSION),
     uuid(B038CEBD-98A7-4FCA-91BC-E13D2E5AE25D),
     exclusiveto(DirectX11Surface)]
    interface IDirectX11SurfaceStatics : IInspectable
    {
        [propget] HRESULT ResourcePriorityMinimum(
            [out, retval] UINT32* value);

        [propget] HRESULT ResourcePriorityLow(
            [out, retval] UINT32* value);

        [propget] HRESULT ResourcePriorityNormal(
            [out, retval] UINT32* value);

        [propget] HRESULT ResourcePriorityHigh(
            [out, retval] UINT32* value);

        [propget] HRESULT ResourcePriorityMaximum(
            [out, retval] UINT32* value);
    }

    [version(VERSION), 
     marshaling_behavior(agile),
     static(IDirectX11SurfaceStatics, VERSION)]
    runtimeclass DirectX11Surface
    {
        [default] interface IDirectX11Surface;
    }
}
