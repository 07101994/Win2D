// Copyright (c) Microsoft Corporation.  All rights reserved

import "inspectable.idl";
import "Windows.Foundation.idl";
import "Canvas.codegen.idl";
import "WinRTDirect3D11.idl";

#include "version.h"

namespace Microsoft.Graphics.Canvas
{
    [version(VERSION)]
    typedef enum CanvasHardwareAcceleration 
    {
        Auto, 
        On,
        Off,
        Unknown
    } CanvasHardwareAcceleration;
    
    runtimeclass CanvasDevice;

    [version(VERSION), uuid(E2C2BF21-5418-43B9-A2DA-539E287C790F)]
    interface ICanvasDeviceFactory : IInspectable
    {
        HRESULT CreateWithDebugLevel(
            [in] CanvasDebugLevel debugLevel,
            [out, retval] CanvasDevice** canvasDevice);

        HRESULT CreateWithDebugLevelAndHardwareAcceleration(
            [in] CanvasDebugLevel debugLevel,
            [in] CanvasHardwareAcceleration hardwareAcceleration,
            [out, retval] CanvasDevice** canvasDevice);
    };

    [version(VERSION), uuid(9B6E2B27-CD07-421A-8F69-0AE8A787FE8C)]
    interface ICanvasDeviceStatics : IInspectable
    {
        HRESULT CreateFromDirect3D11Device(
            [in] CanvasDebugLevel debugLevel,
            [in] Microsoft.Graphics.Canvas.DirectX.Direct3D11.Direct3DDevice* direct3DDevice,
            [out, retval] CanvasDevice** canvasDevice);
    };

    [version(VERSION), uuid(A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6), exclusiveto(CanvasDevice)]
    interface ICanvasDevice : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget] 
        HRESULT HardwareAcceleration(
            [out, retval] CanvasHardwareAcceleration* value);

        [propget]
        HRESULT Direct3DDevice(
            [out, retval] Microsoft.Graphics.Canvas.DirectX.Direct3D11.Direct3DDevice** value);
    };

    [version(VERSION), activatable(VERSION), activatable(ICanvasDeviceFactory, VERSION), static(ICanvasDeviceStatics, VERSION)]
    runtimeclass CanvasDevice
    {
        [default] interface ICanvasDevice;
    }
}
