// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

#if WINVER > _WIN32_WINNT_WINBLUE

namespace Microsoft.Graphics.Canvas.Svg
{
    runtimeclass CanvasSvgDocument;

    // This type interops to ID2D1SvgDocument.
    [version(VERSION), uuid(A0E34929-3551-44FE-A670-D9B3FD800516), exclusiveto(CanvasSvgDocument)]
    interface ICanvasSvgDocument : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget] HRESULT Device([out, retval] Microsoft.Graphics.Canvas.CanvasDevice** value);
        
        // Serializes the document's content out to an XML string. Note that serialized XML may differ from what was
        // originally passed in to construct the document. For example it may contain differently-formatted attributes,
        // differently-ordered attributes, or some elements dropped if they are not supported by Direct2D.
        HRESULT GetXml([out, retval] HSTRING* xmlString);

        // Serializes a document to a stream.
        HRESULT SaveAsync(
            [in] Windows.Storage.Streams.IRandomAccessStream* stream,
            [out][retval] Windows.Foundation.IAsyncAction** asyncAction);

        [propput]
        HRESULT Root([in] CanvasSvgElement* value);

        [propget]
        HRESULT Root([out, retval] CanvasSvgElement** value);

        // Deserializes XML into a new element.
        // A string used to create an XML element must consist of valid XML. 
        // It must contain one root node. 
        // It must be a valid SVG fragment (not necessarily an entire document).

        // An element can belong to zero or one documents. By default, an element isn't
        // associated with any document.

        // Like documents, elements have a device association. A document and all its elements
        // must belong to the same device.

        // Loads an element from an XML string.
        HRESULT LoadElementFromXml(
            [in] HSTRING xmlString,
            [out, retval] CanvasSvgElement** svgElement);

        // Loads an element from a stream.
        HRESULT LoadElementAsync(
            [in] Windows.Storage.Streams.IRandomAccessStream* stream,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasSvgElement*>** svgElement);
    }
    
    [version(VERSION), uuid(7740E748-CB9A-453F-A678-8B3B3A7254D3), exclusiveto(CanvasSvgDocument)]
    interface ICanvasSvgDocumentStatics : IInspectable
    {
        // Loads a document from an XML string.
        HRESULT LoadFromXml(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] HSTRING xmlString,
            [out, retval] CanvasSvgDocument** svgDocument);

        // Loads a document from a stream.
        HRESULT LoadAsync(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.Storage.Streams.IRandomAccessStream* stream,
            [out, retval] Windows.Foundation.IAsyncOperation<CanvasSvgDocument*>** svgDocument);

        // Returns whether the SVG Direct2D feature is supported on this system.
        HRESULT IsSupported(Microsoft.Graphics.Canvas.CanvasDevice* device, [out, retval] boolean* value);
    }

    [version(VERSION), uuid(BAB0F16D-4050-4EF6-8022-8A07E9E74A9D), exclusiveto(CanvasSvgDocument)]
    interface ICanvasSvgDocumentFactory : IInspectable
    {
        HRESULT CreateEmpty(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [out, retval] CanvasSvgDocument** canvasSvgDocument);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasSvgDocumentFactory, VERSION), static(ICanvasSvgDocumentStatics, VERSION)]
    runtimeclass CanvasSvgDocument
    {
        [default] interface ICanvasSvgDocument;
    }
}

#endif
