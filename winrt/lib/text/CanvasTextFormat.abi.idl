// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

import "inspectable.idl";
import "Windows.Foundation.idl";
import "Windows.UI.Text.idl";

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasTextFormat;

    //
    // CanvasTextFormat is used to describe the text format when drawing text.
    //
    // Examples:
    //
    //     Create a CanvasTextFormat with reasonable defaults:
    //
    //         var format = new CanvasTextFormat();
    //
    //     Using a specific font:
    //
    //         var format = new CanvasTextFormat()
    //         {
    //             FontFamily = "Arial"
    //         };
    //
    //     With clipping enabled:
    //
    //         var format = new CanvasTextFormat()
    //         {
    //             Options = CanvasDrawTextOptions.Clip
    //         };
    //
    // CanvasTextFormat is mutable and any parameter may be modified after it
    // has been constructed.
    //
    // CanvasTextFormat pretty much equates to IDWriteTextFormat.  Instances of this
    // are created on demand against the shared dwrite factory.
    //

    //
    // Specifies the flow & reading direction in the form <READING>Then<FLOW>.
    //
    // DWrite has DWRITE_READING_DIRECTION and DWRITE_FLOW_DIRECTION that have
    // essentially the same members.  Some combinations of reading / flow
    // direction are invalid.
    //
    // Canvas merges the two values into a single enum containing only valid
    // combinations.  Any attempt to wrap a CanvasTextFormat around a
    // IDWriteTextFormat with an invalid combination will fail with
    // DWRITE_E_FLOWDIRECTIONCONFLICTS.
    //
    [version(VERSION)]
    typedef enum CanvasTextDirection
    {
        LeftToRightThenTopToBottom,
        RightToLeftThenTopToBottom,
        LeftToRightThenBottomToTop,
        RightToLeftThenBottomToTop,
        TopToBottomThenLeftToRight,
        BottomToTopThenLeftToRight,
        TopToBottomThenRightToLeft,
        BottomToTopThenRightToLeft
    } CanvasTextDirection;


    [version(VERSION)]
    typedef enum CanvasLineSpacingMethod
    {
        Default,
        Uniform
    } CanvasLineSpacingMethod;


    [version(VERSION)]
    typedef enum CanvasHorizontalAlignment
    {
        Left,
        Right,
        Center,
        Justified
    } CanvasHorizontalAlignment;


    [version(VERSION)]
    typedef enum CanvasVerticalAlignment
    {
        Top,
        Bottom,
        Center
    } CanvasVerticalAlignment;

    
    [version(VERSION)]
    typedef enum CanvasTextTrimmingGranularity
    {
        None,
        Character,
        Word
    } CanvasTextTrimmingGranularity;


    [version(VERSION)]
    typedef enum CanvasWordWrapping
    {
        Wrap,
        NoWrap,
        EmergencyBreak,
        WholeWord,
        Character
    } CanvasWordWrapping;

#define PROPERTY(NAME, TYPE)                            \
    [propget] HRESULT NAME([out, retval] TYPE* value);  \
    [propput] HRESULT NAME([in] TYPE value)

    [version(VERSION), uuid(AF61BFDC-EABB-4D38-BA1B-AFB340612D33), exclusiveto(CanvasTextFormat)]
    interface ICanvasTextFormat : IInspectable
        requires Windows.Foundation.IClosable
    {
        PROPERTY(Direction,              CanvasTextDirection); // [1]
        PROPERTY(FontFamily,             HSTRING);
        PROPERTY(FontSize,               float);
        PROPERTY(FontStretch,            Windows.UI.Text.FontStretch);
        PROPERTY(FontStyle,              Windows.UI.Text.FontStyle);
        PROPERTY(FontWeight,             Windows.UI.Text.FontWeight);
        PROPERTY(IncrementalTabStop,     float);
        PROPERTY(LineSpacingMethod,      CanvasLineSpacingMethod);
        PROPERTY(LineSpacing,            float);
        PROPERTY(LineSpacingBaseline,    float);
        PROPERTY(LocaleName,             HSTRING);
        PROPERTY(VerticalAlignment,      CanvasVerticalAlignment); // [2]
        PROPERTY(HorizontalAlignment,    CanvasHorizontalAlignment); // [2]
        PROPERTY(TrimmingGranularity,    CanvasTextTrimmingGranularity);
        PROPERTY(TrimmingDelimiter,      HSTRING); // [3]
        PROPERTY(TrimmingDelimiterCount, INT32); // [4]
        PROPERTY(WordWrapping,           CanvasWordWrapping);
        PROPERTY(Options,                CanvasDrawTextOptions); // [5]

        //
        // [1] Direction corresponds to IDWriteTextFormat::FlowDirection and
        //     IDWriteTextFormat::ReadingDirection.  The CanvasTextDirection
        //     enum only contains values corresponding to valid combindations of
        //     Flow / ReadingDirection.
        //
        // [2] CanvasTextFormat.HorizontalAlignment corresponds to
        //     IDWriteTextFormat::TextAlignment, while
        //     CanvasTextFormat.VerticalAlignment corresponds to
        //     IDWriteTextFormat::ParagraphAlignment.  The properties have been
        //     renamed to allow for a consistent Horizontal/Vertical alignment
        //     names.
        //
        // [3] In DWrite, delimiter is a uint32.  In Canvas, Delimiter is an
        //     HSTRING since the WinRT guideline for representing a Unicode
        //     character is to use an HSTRING rather than two CHAR16s.
        //
        // [4] In DWrite, delimiterCount is a uint32.  In Canvas it is a int32
        //     since the WinRT guideline is to prefer signed integer types.
        //
        // [5] CanvasTextFormat.Options is not a member of IDWriteTextFormat.
        //     However, all cases where we may want to use a CanvasTextFormat
        //     will also need to have an Options provided, so it makes sense to
        //     combine the two.
        //
        // FontCollection will be added in the future.  #821 covers adding
        // custom font loading which is when having configurable font collection
        // will become interesting.  For now, the system font collection, or a
        // font collection specified by a URI in the font family property is
        // used.
        //
        // TODO #841: A TrimmingSign property should be added in the future that
        // allows a IDWriteInlineObject equivalent to provide the trimming sign
        // to SetTrimming.  For now, a NULL trimming sign is always used.
        //
    }

#undef PROPERTY

    [version(VERSION), activatable(VERSION)]
    runtimeclass CanvasTextFormat
    {
        [default] interface ICanvasTextFormat;
    }    
}
