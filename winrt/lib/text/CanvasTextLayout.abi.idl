// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas.Text
{
    runtimeclass CanvasTextLayout;

    [version(VERSION)]
    typedef enum CanvasOpticalAlignment // Corresponds to DWRITE_OPTICAL_ALIGNMENT.
    {
        Default,
        NoSideBearings
    } CanvasOpticalAlignment;

    [version(VERSION)]
    typedef enum CanvasVerticalGlyphOrientation // Corresponds to DWRITE_VERTICAL_GLYPH_ORIENTATION.
    {
        Default,
        Stacked
    } CanvasVerticalGlyphOrientation;
    
    [version(VERSION)]
    typedef struct CanvasTextLayoutRegion
    {
        int CharacterIndex; // First character index within the hit region.
        int CharacterCount; // Number of characters within the hit region.
        Windows.Foundation.Rect LayoutBounds; // Layout bounds of characters in the hit region.
    } CanvasTextLayoutRegion;

#define PROPERTY(NAME, TYPE)                            \
    [propget] HRESULT NAME([out, retval] TYPE* value);  \
    [propput] HRESULT NAME([in] TYPE value)

    [version(VERSION), uuid(BAE63E54-48AE-4446-A2C7-B6EF93806C20), exclusiveto(CanvasTextLayout)]
    interface ICanvasTextLayout : IInspectable
        requires Windows.Foundation.IClosable
    {
        HRESULT GetFormatChangeIndices(
            [out] UINT32* stopCount,
            [out, size_is(, *stopCount), retval] INT32** stops);

        //
        // IDWriteTextFormat
        //
        PROPERTY(Direction, CanvasTextDirection);
        [propget] HRESULT DefaultFontFamily([out, retval] HSTRING* value);
        [propget] HRESULT DefaultFontSize([out, retval] float* value);
        [propget] HRESULT DefaultFontStretch([out, retval] Windows.UI.Text.FontStretch* value);
        [propget] HRESULT DefaultFontStyle([out, retval] Windows.UI.Text.FontStyle* value);
        [propget] HRESULT DefaultFontWeight([out, retval] Windows.UI.Text.FontWeight* value);
        PROPERTY(IncrementalTabStop, float);
        PROPERTY(LineSpacingMethod, CanvasLineSpacingMethod);
        PROPERTY(LineSpacing, float);
        PROPERTY(LineSpacingBaseline, float);
        [propget] HRESULT DefaultLocaleName([out, retval] HSTRING* value);
        PROPERTY(VerticalAlignment, CanvasVerticalAlignment);
        PROPERTY(HorizontalAlignment, CanvasHorizontalAlignment);
        PROPERTY(TrimmingGranularity, CanvasTextTrimmingGranularity);
        PROPERTY(TrimmingDelimiter, HSTRING);
        PROPERTY(TrimmingDelimiterCount, INT32);
        PROPERTY(WordWrapping, CanvasWordWrapping);
        PROPERTY(Options, CanvasDrawTextOptions);

        // Not exposed:                             Reason
        //---------------                           -------
        // GetDefaultFontCollection                 Relies on exposure of IDWriteFontCollection. Needs design. Out of scope.
        // SetTrimming's trimmingSign argument      Advanced usage, needs design decisions about IDWriteInlineObject.

        ///////////////////////////////////////////////////////////////////////
        //
        // IDWriteTextLayout
        //

        PROPERTY(MaximumLayoutSize, Windows.Foundation.Size); // Corresponds to Set/GetMaxWidth and Set/GetMaxHeight.

        HRESULT GetMinimumLayoutWidth([out, retval] float* value); // Corresponds to DetermineMinWidth.

        //
        // Exposed through IDWriteTextLayout::GetDrawingEffect.
        // This method fails if the color source, through interop, was set to something other than an ID2D1Brush.
        //
        HRESULT GetBrush(
            [in] INT32 characterIndex,
            [out, retval] Microsoft.Graphics.Canvas.Brushes.ICanvasBrush** brush); 

        HRESULT GetFontFamily(
            [in] INT32 characterIndex,
            [out, retval] HSTRING* fontFamily);

        HRESULT GetFontSize(
            [in] INT32 characterIndex,
            [out, retval] float* fontSize);

        HRESULT GetFontStretch(
            [in] INT32 characterIndex,
            [out, retval] Windows.UI.Text.FontStretch* fontStretch);

        HRESULT GetFontStyle(
            [in] INT32 characterIndex,
            [out, retval] Windows.UI.Text.FontStyle* fontStyle);

        HRESULT GetFontWeight(
            [in] INT32 characterIndex,
            [out, retval] Windows.UI.Text.FontWeight* fontWeight);

        HRESULT GetLocaleName(
            [in] INT32 characterIndex,
            [out, retval] HSTRING* localeName);

        HRESULT GetStrikethrough(
            [in] INT32 characterIndex,
            [out, retval] boolean* hasStrikethrough);

        HRESULT GetUnderline(
            [in] INT32 characterIndex,
            [out, retval] boolean* hasUnderline);

        // SetColor and SetBrush are exposed through IDWriteTextLayout::SetDrawingEffect.
        HRESULT SetColor(
            [in] INT32 characterIndex,
            [in] INT32 characterCount, 
            [in] Windows.UI.Color color); 

        HRESULT SetBrush(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] Microsoft.Graphics.Canvas.Brushes.ICanvasBrush* brush);

        HRESULT SetFontFamily(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] HSTRING fontFamily);

        HRESULT SetFontSize(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] float fontSize);

        HRESULT SetFontStretch(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] Windows.UI.Text.FontStretch fontStretch);

        HRESULT SetFontStyle(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] Windows.UI.Text.FontStyle fontStyle);

        HRESULT SetFontWeight(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] Windows.UI.Text.FontWeight fontWeight);

        HRESULT SetLocaleName(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] HSTRING name);

        HRESULT SetStrikethrough(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] boolean hasStrikethrough);

        HRESULT SetUnderline(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] boolean hasUnderline);

        // Not exposed:                             Reason
        //---------------                           -------
        // Draw                                     Used primarily, by custom renderers, out of scope. Part of DWrite completeness
        // GetClusterMetrics                        Advanced usage, out of scope.
        // Get/Set FontCollection                   Relies on IDWriteFontCollection. Separate design issue on how to expose this.
        // Get/Set InlineObject                     Advanced usage, out of scope.
        // GetLineMetrics                           Advanced usage, out of scope.
        // Get/Set Typography                       Relies on IDWriteTypography. Advanced usage. Separate design issue on how to expose this.

        // Exposed through IDWriteTextLayout::GetMetrics.
        [propget] HRESULT LayoutBounds(
            [out, retval] Windows.Foundation.Rect* bounds);

        // Exposed through IDWriteTextLayout::GetMetrics.
        [propget] HRESULT LineCount(
            [out, retval] INT32* lineCount);

        // Exposed through IDWriteTextLayout::GetOverhangMetrics.
        [propget] HRESULT DrawBounds(
            [out, retval] Windows.Foundation.Rect* bounds);

        // Exposed through IDWriteTextLayout::HitTestPoint.
        [overload("HitTest")]
        HRESULT HitTest(
            [in] NUMERICS.Vector2 point,
            [out, retval] boolean* isHit);

        [overload("HitTest"), default_overload]
        HRESULT HitTestWithCoords(
            [in] float x,
            [in] float y,
            [out, retval] boolean* isHit);

        [overload("HitTest")]
        HRESULT HitTestWithDescription(
            [in] NUMERICS.Vector2 point,
            [out] CanvasTextLayoutRegion* textLayoutRegion,
            [out, retval] boolean* isHit);

        [overload("HitTest")]
        HRESULT HitTestWithDescriptionAndCoords(
            [in] float x,
            [in] float y,
            [out] CanvasTextLayoutRegion* textLayoutRegion,
            [out, retval] boolean* isHit);

        [overload("HitTest"), default_overload]
        HRESULT HitTestWithDescriptionAndTrailingSide(
            [in] NUMERICS.Vector2 point,
            [out] CanvasTextLayoutRegion* textLayoutRegion,
            [out] boolean* trailingSideOfCharacter,
            [out, retval] boolean* isHit);

        [overload("HitTest")]
        HRESULT HitTestWithDescriptionAndCoordsAndTrailingSide(
            [in] float x,
            [in] float y,
            [out] CanvasTextLayoutRegion* textLayoutRegion,
            [out] boolean* trailingSideOfCharacter,
            [out, retval] boolean* isHit);

        // Exposed through IDWriteTextLayout::HitTestTextPosition.
        [overload("GetCaretPosition")]
        HRESULT GetCaretPosition(
            [in] INT32 characterIndex,
            [in] boolean trailingSideOfCharacter,
            [out, retval] NUMERICS.Vector2* location);

        [overload("GetCaretPosition"), default_overload]
        HRESULT GetCaretPositionWithDescription(
            [in] INT32 characterIndex,
            [in] boolean trailingSideOfCharacter,
            [out] CanvasTextLayoutRegion* textLayoutRegion,
            [out, retval] NUMERICS.Vector2* location);

        // Exposed through IDWriteTextLayout::HitTestTextRange.
        [overload("GetCharacterRegions"), default_overload]
        HRESULT GetCharacterRegions(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [out] UINT32* hitTestDescriptionCount,
            [out, size_is(, *hitTestDescriptionCount), retval] CanvasTextLayoutRegion** hitTestDescriptions);

        ///////////////////////////////////////////////////////////////////////
        //
        // IDWriteTextLayout1

        //
        // Most apps will want pair-kerning disabled, because non-pair-kerning tends
        // to be more well-defined, and correct. However, for the purposes of legacy
        // rendering, pair kerning is an option.
        //
        // Pair kerning will only actually be used when rendering, if the font face supports it.
        //
        HRESULT GetPairKerning(
            [in] INT32 characterIndex,
            [out, retval] boolean* hasPairKerning);

        HRESULT SetPairKerning(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] boolean hasPairKerning);

        HRESULT GetLeadingCharacterSpacing(
            [in] INT32 characterIndex,
            [out, retval] float* leadingSpacing);

        HRESULT GetTrailingCharacterSpacing(
            [in] INT32 characterIndex,
            [out, retval] float* trailingSpacing);

        HRESULT GetMinimumCharacterAdvanceWidth(
            [in] INT32 characterIndex,
            [out, retval] float* minimumAdvanceWidth);

        HRESULT SetCharacterSpacing(
            [in] INT32 characterIndex,
            [in] INT32 characterCount,
            [in] float leadingSpacing,
            [in] float trailingSpacing,
            [in] float minimumAdvanceWidth);

        ///////////////////////////////////////////////////////////////////////
        //
        // IDWriteTextLayout2
        PROPERTY(VerticalGlyphOrientation, CanvasVerticalGlyphOrientation); // Maps to Get/SetVerticalGlyphOrientation
        PROPERTY(OpticalAlignment, CanvasOpticalAlignment); // Maps to Get/SetOpticalAlignment
        PROPERTY(LastLineWrapping, boolean);

        // Not exposed:                             Reason
        //---------------                           -------
        // Get/SetFontFallback                      Relies on IDWriteFontFallback. Separate design issue on how to expose this.
        // GetMetrics                               Out of scope for this item. Backlog #820 for getting text metrics

        [propget] HRESULT Device([out, retval] Microsoft.Graphics.Canvas.CanvasDevice** value);

    }

    [version(VERSION), uuid(9C1F7179-ACD0-4680-93D5-95A6247E8F6B), exclusiveto(CanvasTextLayout)]
    interface ICanvasTextLayoutFactory : IInspectable
    {
        HRESULT Create(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] HSTRING textString,
            [in] CanvasTextFormat* textFormat,
            [in] float maximumLayoutWidth,
            [in] float maximumLayoutHeight,
            [out, retval] CanvasTextLayout** canvasTextLayout);
    };

    [version(VERSION), activatable(ICanvasTextLayoutFactory, VERSION)]
    runtimeclass CanvasTextLayout
    {
        [default] interface ICanvasTextLayout;
    }
}
