import "inspectable.idl";
import "Windows.Foundation.idl";
import "Windows.UI.idl";
import "WinRTMath.idl";

#include "version.h"

namespace Microsoft.Graphics.Canvas
{
    //
    // ICanvasGeometry
    //
    [uuid(A0D3D5DC-A2BD-4E5A-AA75-C13B8FF238C2), version(VERSION)]
    interface ICanvasGeometry : IInspectable
        requires Windows.Foundation.IClosable
    {
    }

    //
    // ICanvasBrush
    //
    [uuid(718BAB7E-2A06-46DB-8127-11F65291554E), version(VERSION)]
    interface ICanvasBrush : IInspectable
        requires Windows.Foundation.IClosable
    {
    }

    [version(VERSION)]
    typedef enum CanvasArcSize
    {
        Small = (int)0,
        Large = (int)1
    } CanvasArcSize;

    [version(VERSION)]
    typedef enum CanvasGeometrySimplificationOption
    {
        CubicsAndLines = (int)0,
        Lines = (int)1
    } CanvasGeometrySimplificationOption;

    [version(VERSION)]
    typedef enum CanvasBitmapInterpolationMode
    {
        NearestNeighbor = (int)0,
        Linear = (int)1
    } CanvasBitmapInterpolationMode;

    [version(VERSION)]
    typedef enum CanvasGamma
    {
        Srgb = (int)0,
        Linear = (int)1
    } CanvasGamma;

    [version(VERSION)]
    typedef enum CanvasOpacityMaskContent
    {
        Graphics = (int)0,
        TextNatural = (int)1,
        TextGdiCompatible = (int)2
    } CanvasOpacityMaskContent;

    [version(VERSION)]
    typedef enum CanvasCombineMode
    {
        Union = (int)0,
        Intersect = (int)1,
        Xor = (int)2,
        Exclude = (int)3
    } CanvasCombineMode;

    [version(VERSION)]
    typedef enum CanvasDashStyle
    {
        Solid = (int)0,
        Dash = (int)1,
        Dot = (int)2,
        DashDot = (int)3,
        DashDotDot = (int)4,
        Custom = (int)5
    } CanvasDashStyle;

    [version(VERSION)]
    typedef enum CanvasDebugLevel
    {
        None = (int)0,
        Error = (int)1,
        Warning = (int)2,
        Information = (int)3
    } CanvasDebugLevel;

    [version(VERSION), flags]
    typedef enum CanvasDrawTextOptions
    {
        NoSnap = 0x00000001,
        Clip = 0x00000002,
        EnableColorFont = 0x00000004,
        None = 0x00000000
    } CanvasDrawTextOptions;

    [version(VERSION)]
    typedef enum CanvasAntialiasMode
    {
        PerPrimitive = (int)0,
        Aliased = (int)1
    } CanvasAntialiasMode;

    [version(VERSION)]
    typedef enum CanvasAlphaMode
    {
        Unknown = (int)0,
        Premultiplied = (int)1,
        Straight = (int)2,
        Ignore = (int)3
    } CanvasAlphaMode;

    [version(VERSION)]
    typedef enum CanvasExtendMode
    {
        Clamp = (int)0,
        Wrap = (int)1,
        Mirror = (int)2
    } CanvasExtendMode;

    [version(VERSION)]
    typedef enum CanvasFactoryType
    {
        SingleThreaded = (int)0,
        MultiThreaded = (int)1
    } CanvasFactoryType;

    [version(VERSION)]
    typedef enum CanvasFeatureLevel
    {
        Default = (int)0,
        Level9 = (int)0x9100,
        Level10 = (int)0xA000
    } CanvasFeatureLevel;

    [version(VERSION)]
    typedef enum CanvasFigureBegin
    {
        Filled = (int)0,
        Hollow = (int)1
    } CanvasFigureBegin;

    [version(VERSION)]
    typedef enum CanvasFigureEnd
    {
        Open = (int)0,
        Closed = (int)1
    } CanvasFigureEnd;

    [version(VERSION)]
    typedef enum CanvasGeometryRelation
    {
        Unknown = (int)0,
        Disjoint = (int)1,
        IsContained = (int)2,
        Contains = (int)3,
        Overlap = (int)4
    } CanvasGeometryRelation;

    [version(VERSION), flags]
    typedef enum CanvasPathSegment
    {
        None = 0x00000000,
        ForceUnstroked = 0x00000001,
        ForceRoundLineJoin = 0x00000002
    } CanvasPathSegment;

    [version(VERSION)]
    typedef enum CanvasCapStyle
    {
        Flat = (int)0,
        Square = (int)1,
        Round = (int)2,
        Triangle = (int)3
    } CanvasCapStyle;

    [version(VERSION)]
    typedef enum CanvasLineJoin
    {
        Miter = (int)0,
        Bevel = (int)1,
        Round = (int)2,
        MiterOrBevel = (int)3
    } CanvasLineJoin;

    [version(VERSION), flags]
    typedef enum CanvasPresentOptions
    {
        None = 0x00000000,
        RetainContents = 0x00000001,
        Immediately = 0x00000002
    } CanvasPresentOptions;

    [version(VERSION), flags]
    typedef enum CanvasRenderTargetUsage
    {
        None = 0x00000000,
        ForceBitmapRemoting = 0x00000001,
        GdiCompatible = 0x00000002
    } CanvasRenderTargetUsage;

    [version(VERSION)]
    typedef enum CanvasRenderTargetType
    {
        Default = (int)0,
        Software = (int)1,
        Hardware = (int)2
    } CanvasRenderTargetType;

    [version(VERSION), flags]
    typedef enum CanvasCompatibleRenderTargetOptions
    {
        None = 0x00000000,
        GdiCompatible = 0x00000001
    } CanvasCompatibleRenderTargetOptions;

    [version(VERSION)]
    typedef enum CanvasSweepDirection
    {
        CounterClockwise = (int)0,
        Clockwise = (int)1
    } CanvasSweepDirection;

    [version(VERSION)]
    typedef enum CanvasTextAntialiasMode
    {
        Default = (int)0,
        Cleartype = (int)1,
        Grayscale = (int)2,
        Aliased = (int)3
    } CanvasTextAntialiasMode;

    [version(VERSION)]
    typedef enum CanvasFillMode
    {
        Alternate = (int)0,
        Winding = (int)1
    } CanvasFillMode;

    [version(VERSION), flags]
    typedef enum CanvasWindowState
    {
        None = 0x0000000,
        Occluded = 0x0000001
    } CanvasWindowState;

    [version(VERSION)]
    typedef enum CanvasDcInitializeMode
    {
        Copy = (int)0,
        Clear = (int)1
    } CanvasDcInitializeMode;

    [version(VERSION), flags]
    typedef enum CanvasBitmapOptions
    {
        None = 0x00000000,
        Target = 0x00000001,
        CannotDraw = 0x00000002,
        CpuRead = 0x00000004,
        GdiCompatible = 0x00000008
    } CanvasBitmapOptions;

    [version(VERSION)]
    typedef enum CanvasCompositeMode
    {
        SourceOver = (int)0,
        DestinationOver = (int)1,
        SourceIn = (int)2,
        DestinationIn = (int)3,
        SourceOut = (int)4,
        DestinationOut = (int)5,
        SourceAtop = (int)6,
        DestinationAtop = (int)7,
        Xor = (int)8,
        Plus = (int)9,
        SourceCopy = (int)10,
        BoundedSourceCopy = (int)11,
        MaskInvert = (int)12
    } CanvasCompositeMode;

    [version(VERSION)]
    typedef enum CanvasBufferPrecision
    {
        Unknown = (int)0,
        Precision8BpcUnorm = (int)1,
        Precision8BpcUnormSrgb = (int)2,
        Precision16BpcUnorm = (int)3,
        Precision16BpcFloat = (int)4,
        Precision32BpcFloat = (int)5
    } CanvasBufferPrecision;

    [version(VERSION), flags]
    typedef enum CanvasMapOptions
    {
        None = 0,
        Read = 1,
        Write = 2,
        Discard = 4
    } CanvasMapOptions;

    [version(VERSION)]
    typedef enum CanvasPropertyType
    {
        Unknown = (int)0,
        String = (int)1,
        Bool = (int)2,
        Uint32 = (int)3,
        Int32 = (int)4,
        Float = (int)5,
        Vector2 = (int)6,
        Vector3 = (int)7,
        Vector4 = (int)8,
        Blob = (int)9,
        Iunknown = (int)10,
        Enum = (int)11,
        Array = (int)12,
        Clsid = (int)13,
        Matrix3x2 = (int)14,
        Matrix4x3 = (int)15,
        Matrix4x4 = (int)16,
        Matrix5x4 = (int)17,
        ColorContext = (int)18
    } CanvasPropertyType;

    [version(VERSION)]
    typedef enum CanvasProperty
    {
        Clsid = (int)0x80000000,
        Displayname = (int)0x80000001,
        Author = (int)0x80000002,
        Category = (int)0x80000003,
        Description = (int)0x80000004,
        Inputs = (int)0x80000005,
        Cached = (int)0x80000006,
        Precision = (int)0x80000007,
        MinInputs = (int)0x80000008,
        MaxInputs = (int)0x80000009
    } CanvasProperty;

    [version(VERSION)]
    typedef enum CanvasSubproperty
    {
        Displayname = (int)0x80000000,
        Isreadonly = (int)0x80000001,
        Min = (int)0x80000002,
        Max = (int)0x80000003,
        Default = (int)0x80000004,
        Fields = (int)0x80000005,
        Index = (int)0x80000006
    } CanvasSubproperty;

    [version(VERSION)]
    typedef enum CanvasInterpolationMode
    {
        NearestNeighbor = (int)0,
        Linear = (int)1,
        Cubic = (int)2,
        MultiSampleLinear = (int)3,
        Anisotropic = (int)4,
        HighQualityCubic = (int)5
    } CanvasInterpolationMode;

    [version(VERSION)]
    typedef enum CanvasUnitMode
    {
        Dips = (int)0,
        Pixels = (int)1
    } CanvasUnitMode;

    [version(VERSION)]
    typedef enum CanvasColorSpace
    {
        Custom = (int)0,
        Srgb = (int)1,
        Scrgb = (int)2
    } CanvasColorSpace;

    [version(VERSION), flags]
    typedef enum CanvasDeviceContextOptions
    {
        None = 0,
        EnableMultithreadedOptimizations = 1
    } CanvasDeviceContextOptions;

    [version(VERSION)]
    typedef enum CanvasStrokeTransformType
    {
        Normal = (int)0,
        Fixed = (int)1,
        Hairline = (int)2
    } CanvasStrokeTransformType;

    [version(VERSION)]
    typedef enum CanvasPrimitiveBlend
    {
        SourceOver = (int)0,
        Copy = (int)1,
        Min = (int)2,
        Add = (int)3
    } CanvasPrimitiveBlend;

    [version(VERSION), flags]
    typedef enum LayerOptions
    {
        None = 0,
        InitializeFromBackground = 1,
        IgnoreAlpha = 2
    } LayerOptions;

    [version(VERSION)]
    typedef enum CanvasThreadingMode
    {
        SingleThreaded = (int)0,
        MultiThreaded = (int)1
    } CanvasThreadingMode;

    [version(VERSION)]
    typedef enum CanvasColorInterpolationMode
    {
        Straight = (int)0,
        Premultiplied = (int)1
    } CanvasColorInterpolationMode;

    [version(VERSION)]
    typedef enum CanvasBorderEdgeMode
    {
        Clamp = (int)0,
        Wrap = (int)1,
        Mirror = (int)2
    } CanvasBorderEdgeMode;

    [version(VERSION)]
    typedef enum CanvasBorderMode
    {
        Soft = (int)0,
        Hard = (int)1
    } CanvasBorderMode;

    [version(VERSION)]
    typedef enum CanvasColormanagementRenderingIntent
    {
        Perceptual = (int)0,
        RelativeColorimetric = (int)1,
        Saturation = (int)2,
        AbsoluteColorimetric = (int)3
    } CanvasColormanagementRenderingIntent;

    [version(VERSION)]
    typedef enum CanvasChannelSelector
    {
        R = (int)0,
        G = (int)1,
        B = (int)2,
        A = (int)3
    } CanvasChannelSelector;

    [version(VERSION)]
    typedef enum CanvasBitmapsourceOrientation
    {
        Default = (int)1,
        FlipHorizontal = (int)2,
        RotateClockwise180 = (int)3,
        RotateClockwise180FlipHorizontal = (int)4,
        RotateClockwise270FlipHorizontal = (int)5,
        RotateClockwise90 = (int)6,
        RotateClockwise90FlipHorizontal = (int)7,
        RotateClockwise270 = (int)8
    } CanvasBitmapsourceOrientation;

    [version(VERSION)]
    typedef enum CanvasPrintFontSubsetMode
    {
        Default = (int)0,
        Eachpage = (int)1,
        None = (int)2
    } CanvasPrintFontSubsetMode;

    [version(VERSION), flags]
    typedef enum CanvasChangeType
    {
        None = 0,
        Properties = 1,
        Context = 2,
        Graph = 3
    } CanvasChangeType;

    [version(VERSION), flags]
    typedef enum CanvasPixelOptions
    {
        None = 0,
        TrivialSampling = 1
    } CanvasPixelOptions;

    [version(VERSION), flags]
    typedef enum CanvasVertexOptions
    {
        None = 0,
        DoNotClear = 1,
        UseDepthBuffer = 2,
        AssumeNoOverlap = 4
    } CanvasVertexOptions;

    [version(VERSION)]
    typedef enum CanvasVertexUsage
    {
        Static = (int)0,
        Dynamic = (int)1
    } CanvasVertexUsage;

    [version(VERSION)]
    typedef enum CanvasBlendOperation
    {
        Add = (int)1,
        Subtract = (int)2,
        RevSubtract = (int)3,
        Min = (int)4,
        Max = (int)5
    } CanvasBlendOperation;

    [version(VERSION)]
    typedef enum CanvasBlend
    {
        Zero = (int)1,
        One = (int)2,
        SrcColor = (int)3,
        InvSrcColor = (int)4,
        SrcAlpha = (int)5,
        InvSrcAlpha = (int)6,
        DestAlpha = (int)7,
        InvDestAlpha = (int)8,
        DestColor = (int)9,
        InvDestColor = (int)10,
        SrcAlphaSat = (int)11,
        BlendFactor = (int)14,
        InvBlendFactor = (int)15
    } CanvasBlend;

    [version(VERSION)]
    typedef enum CanvasChannelDepth
    {
        Default = (int)0,
        Depth1 = (int)1,
        Depth4 = (int)4
    } CanvasChannelDepth;

    [version(VERSION)]
    typedef enum CanvasFilter
    {
        MinMagMipPoint = (int)0x00,
        MinMagPointMipLinear = (int)0x01,
        MinPointMagLinearMipPoint = (int)0x04,
        MinPointMagMipLinear = (int)0x05,
        MinLinearMagMipPoint = (int)0x10,
        MinLinearMagPointMipLinear = (int)0x11,
        MinMagLinearMipPoint = (int)0x14,
        MinMagMipLinear = (int)0x15,
        Anisotropic = (int)0x55
    } CanvasFilter;

    [version(VERSION)]
    typedef enum CanvasFeature
    {
        Doubles = (int)0,
        D3d10XHardwareOptions = (int)1
    } CanvasFeature;

    [version(VERSION)]
    typedef enum CanvasRenderingPriority
    {
        Normal = (int)0,
        Low = (int)1
    } CanvasRenderingPriority;

    [version(VERSION)]
    typedef struct CanvasArcSegment
    {
        Windows.Foundation.Point Point;
        Windows.Foundation.Size Size;
        FLOAT RotationAngle;
        CanvasSweepDirection SweepDirection;
        CanvasArcSize ArcSize;
    } CanvasArcSegment;

    [version(VERSION)]
    typedef struct CanvasBezierSegment
    {
        Windows.Foundation.Point Point1;
        Windows.Foundation.Point Point2;
        Windows.Foundation.Point Point3;
    } CanvasBezierSegment;

    [version(VERSION)]
    typedef struct CanvasTriangle
    {
        Windows.Foundation.Point Point1;
        Windows.Foundation.Point Point2;
        Windows.Foundation.Point Point3;
    } CanvasTriangle;

    [version(VERSION)]
    typedef struct CanvasEllipse
    {
        Windows.Foundation.Point Point;
        FLOAT RadiusX;
        FLOAT RadiusY;
    } CanvasEllipse;

    [version(VERSION)]
    typedef struct CanvasGradientStop
    {
        FLOAT Position;
        Windows.UI.Color Color;
    } CanvasGradientStop;

    [version(VERSION)]
    typedef struct CanvasQuadraticBezierSegment
    {
        Windows.Foundation.Point Point1;
        Windows.Foundation.Point Point2;
    } CanvasQuadraticBezierSegment;

    [version(VERSION)]
    typedef struct RoundedRectangle
    {
        Windows.Foundation.Rect Rect;
        FLOAT RadiusX;
        FLOAT RadiusY;
    } RoundedRectangle;

    [version(VERSION)]
    typedef struct CanvasLinearGradientBrushProperties
    {
        Windows.Foundation.Point StartPoint;
        Windows.Foundation.Point EndPoint;
    } CanvasLinearGradientBrushProperties;

    [version(VERSION)]
    typedef struct CanvasRadialGradientBrushProperties
    {
        Windows.Foundation.Point Center;
        Windows.Foundation.Point GradientOriginOffset;
        FLOAT RadiusX;
        FLOAT RadiusY;
    } CanvasRadialGradientBrushProperties;

    interface ILayerParameters;
    runtimeclass LayerParameters;

    [uuid(4a837512-5ca1-46eb-96d1-fcc634796341), version(VERSION), exclusiveto(LayerParameters)]
    interface ILayerParameters : IInspectable
    {
        [propget] HRESULT ContentBounds([out, retval] Windows.Foundation.Rect* value);
        [propput] HRESULT ContentBounds([in] Windows.Foundation.Rect value);

        [propget] HRESULT GeometricMask([out, retval] ICanvasGeometry** value);
        [propput] HRESULT GeometricMask([in] ICanvasGeometry* value);

        [propget] HRESULT MaskAntialiasMode([out, retval] CanvasAntialiasMode* value);
        [propput] HRESULT MaskAntialiasMode([in] CanvasAntialiasMode value);

        [propget] HRESULT MaskTransform([out, retval] Microsoft.Graphics.Canvas.Math.Matrix3x2* value);
        [propput] HRESULT MaskTransform([in] Microsoft.Graphics.Canvas.Math.Matrix3x2 value);

        [propget] HRESULT Opacity([out, retval] FLOAT* value);
        [propput] HRESULT Opacity([in] FLOAT value);

        [propget] HRESULT OpacityBrush([out, retval] ICanvasBrush** value);
        [propput] HRESULT OpacityBrush([in] ICanvasBrush* value);

        [propget] HRESULT LayerOptions([out, retval] LayerOptions* value);
        [propput] HRESULT LayerOptions([in] LayerOptions value);
    }

    [version(VERSION), activatable(VERSION)]
    runtimeclass LayerParameters
    {
        [default] interface ILayerParameters;
    }

    [version(VERSION)]
    typedef struct StrokeStyleProperties
    {
        CanvasCapStyle StartCap;
        CanvasCapStyle EndCap;
        CanvasCapStyle DashCap;
        CanvasLineJoin LineJoin;
        FLOAT MiterLimit;
        CanvasDashStyle DashStyle;
        FLOAT DashOffset;
        CanvasStrokeTransformType TransformType;
    } StrokeStyleProperties;

}
