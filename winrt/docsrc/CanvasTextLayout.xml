<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>  

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment">
      <summary>Specifies how glyphs are aligned to the margin.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment.Default">
      <summary>Glyphs are aligned according to their 'cell' boundaries. </summary>
      <remarks>This may include some whitespace beside the glyph.</remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment.NoSideBearings">
      <summary>Glyphs are aligned according to their 'ink' boundaries. </summary>
      <remarks>This will push the 'inked' part (usually, the rendered part) as close to the margin as possible.
      Note that some glyphs may still overhang outside the margin, such as flourishes or italic slants.</remarks>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextLayout">
      <summary>Describes a cached, drawable piece of text.</summary>
      <remarks>For text which changes infrequently, use CanvasTextLayout.</remarks>
      <example>
        How to create a CanvasTextLayout:
        <code>
          var format = new CanvasTextFormat();
          
          var textLayout = new CanvasTextLayout("A piece of text", format, layoutWidth, layoutHeight);
        </code>        

        How to draw a CanvasTextLayout:
        <code>
          using (var ds = renderTarget.CreateDrawingSession())
          {
              ds.DrawTextLayout(textLayout, 100, 200, Colors.White); // White text is drawn at (100, 200)
          }
        </code>
        
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.#ctor(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String,Microsoft.Graphics.Canvas.Text.CanvasTextFormat,System.Single,System.Single)">
      <summary>Initializes a new instance of the CanvasTextLayout class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetPairKerning(System.Int32)">
      <summary>Gets whether pair kerning is used for the character at the position specified.</summary>
      <remarks>
        <p>
        Pair kerning is a scheme where a table permutes every glyph against
        every other glyph, and each pair has an explicit kerning value defined. This option
        is desired for some legacy rendering. Non-pair-kerning is determined using
        a more sophisticated computation involving classes of glyphs, and this is the default.
        </p>
        <p>
        Pair kerning isn't supported on all typefaces. If pair kerning is specified, but the
        typeface doesn't support it, non-pair-kerning will be used.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetPairKerning(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets whether pair kerning is used for the group of characters specified.</summary>
      <remarks>
        <p>
        Pair kerning is a scheme where a table permutes every glyph against
        every other glyph, and each pair has an explicit kerning value defined. This option
        is desired for some legacy rendering. Non-pair-kerning is determined using
        a more sophisticated computation involving classes of glyphs, and this is the default.
        </p>
        <p>
        Pair kerning isn't supported on all typefaces. If pair kerning is specified, but the
        typeface doesn't support it, non-pair-kerning will be used.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetLeadingCharacterSpacing(System.Int32)">
      <summary>Gets the the spacing before the character specified, in reading order. </summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetTrailingCharacterSpacing(System.Int32)">
      <summary>Gets the spacing after the character specified, in reading order.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetMinimumCharacterAdvance(System.Int32)">
      <summary>Gets the minimum advance of the character specified.</summary>
      <remarks>
        <p>
          Minimum advance width is the minimum amount to move forward from one character
          to the next, to prevent characters from becoming too thin or zero-width. This must be zero or greater.</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetCharacterSpacing(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
      <summary>Sets the spacing between characters.</summary>
      <remarks>
        <p>Leading spacing is the spacing before each character, in reading order.</p>
        <p>Trailing spacing is the spacing after each character, in reading order.</p>
        <p>Minimum advance width is the minimum amount to move forward from one character
        to the next, to prevent characters from becoming too thin or zero-width. This must be zero or greater.</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Dispose">
      <summary>Releases all resources used by the CanvasTextLayout.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFormatChangeIndices">
      <summary>Gets an array of position indices at which the text format changes.</summary>
      <remarks>By convention, an empty string will yield an array containing only {0}. </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetMinimumLineLength">
      <summary>Gets the minimum possible width/height the layout can be set to, without any emergency breakings between the characters of whole words.</summary>
      <remarks>
        <p>
          If the TextDirection property specifies horizontally oriented text
          then this method returns the minimum width that can be set on the
          layout.  If the TextDirection property specifies vertically oriented
          text then this method returns the minimum height.
        </p>
        
        <p>
          Horizontally oriented text directions are:
          <ul>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenTopToBottom" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenTopToBottom" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenBottomToTop" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenBottomToTop" /></li>
          </ul>
          Vertically oriented text directions are:
          <ul>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenLeftToRight" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenLeftToRight" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenRightToLeft" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenRightToLeft" /></li>
          </ul>
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontFamily(System.Int32)">
      <summary>Gets the font family of the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontSize(System.Int32)">
      <summary>Gets the font size for the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontStretch(System.Int32)">
      <summary>Gets the font stretch for the character at the specified position.</summary>
      <remarks>This indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontStyle(System.Int32)">
      <summary>Gets the font style for the character at the specified position.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontWeight(System.Int32)">
      <summary>Gets the font weight for the character at the specified position.</summary>
      <remarks>Font weight is the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetLocaleName(System.Int32)">
      <summary>Specifies the locale name for the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetStrikethrough(System.Int32)">
      <summary>Gets whether the character at the specified position has strikethrough.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetUnderline(System.Int32)">
      <summary>Gets whether the character at the specified position is underlined.</summary>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetBrush(System.Int32)">
      <summary>Gets the brush associated with a character index in the text layout.</summary>
      <remarks>
      	<p>
      	If the color was set using <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)"/> for this index, this method returns a 
      	<see cref="T:Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush"/> with the appropriate color.
      	</p>
      	<p>
      	If there isn't an associated brush or color, null is returned.
      	</p>
      	</remarks>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontFamily(System.Int32,System.Int32,System.String)">
      <summary>Sets the font family of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontSize(System.Int32,System.Int32,System.Single)">
      <summary>Sets the font size of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontStretch(System.Int32,System.Int32,Windows.UI.Text.FontStretch)">
      <summary>Sets the font stretch of the specified group of characters.</summary>
      <remarks>This indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontStyle(System.Int32,System.Int32,Windows.UI.Text.FontStyle)">
      <summary>Sets the font style of the specified group of characters.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontWeight(System.Int32,System.Int32,Windows.UI.Text.FontWeight)">
      <summary>Sets the font weight of the specified group of characters.</summary>
      <remarks>Font weight is the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetLocaleName(System.Int32,System.Int32,System.String)">
      <summary>Sets the local name of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetStrikethrough(System.Int32,System.Int32,System.Boolean)">
      <summary>Applies strikethrough formatting to the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetUnderline(System.Int32,System.Int32,System.Boolean)">
      <summary>Applies underline formatting to the specified group of characters.</summary>
    </member>  
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)">
      <summary>Sets the color associated with a group of characters in the text layout.</summary>
      <remarks>
      	<p>
      	This color takes effect while calling 
      	<see cref="M:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout,System.Single,System.Single,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/>
      	It overrides the brush or color passed to DrawTextLayout.
      	</p>
      	<p>
      	Calling <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetBrush(System.Int32)"/> for this same index, after calling this method, will yield a 
      	<see cref="T:Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush"/> with the appropriate color.
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetBrush(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)">
      <summary>Sets the brush associated with a group of characters in the text layout.</summary>
      <remarks>
      	<p>
      	This brush takes effect while calling 
      	<see cref="M:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout,System.Single,System.Single,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/>
      	It overrides the brush or color passed to DrawTextLayout.
      	</p>
      	<p>
      	The brush is allowed to be null. Setting a group of characters' brush to null causes the default behavior, where the brush passed to DrawTextLayout determines the color of the text.
      	</p>
      </remarks>
    </member>
      
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.WordWrapping">
      <summary>Specifies word wrapping behavior.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.VerticalGlyphOrientation">
      <summary>Specifies the orientation of glyphs when a vertical reading direction is used.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.VerticalAlignment">
      <summary>Specifies the vertical paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingGranularity">
      <summary>Specifies the granularity used to trim text overflowing the layout box.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingDelimiterCount">
      <summary>A value that indicates how many occurrences of the delimiter to step back.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingDelimiter">
      <summary>
        A character code used as the delimiter that signals the beginning of the portion of text to be preserved.
        Most useful for path ellipsis, where the delimiter would be a slash.
       </summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Direction">
      <summary>Specifies the direction in which the text is read.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HorizontalAlignment">
      <summary>Specifies the horizontal paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.OpticalAlignment">
      <summary>Specifies the optical margin aligment for the text layout.</summary>
      <remarks>
      	<p>
      	By default, glyphs are aligned to the margin by the default origin and side-bearings 
      	of the glyph. If you specify CanvasOpticalAlignment.None, then the alignment 
      	uses the side bearings to offset the glyph from the aligned edge, to ensure 
      	the ink of the glyphs are aligned.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.RequestedSize">
      <summary>Specifies the requested size.</summary>
      <remarks>
        This option is for controlling word wrapping and alignment - it won't
        perform any kind of clipping behavior. If word wrapping is enabled, text
        is wrapped according to these dimensions. The actual LayoutBounds or
        DrawBounds may be larger than the RequestedSize.
        </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingBaseline">
      <summary>Specifies the distance from top of line to baseline. A reasonable ratio to lineSpacing is 80 percent.</summary>
      <remarks>
        This property is ignored when <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacing" /> is negative.
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacing">
      <summary>Negative values use default line spacing; non-negative values specify the line height.</summary>
      <remarks>
        The line height is the distance from one baseline to another.  When
        LineSpacing is negative the <see
        cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingBaseline"/>
        property is ignored.
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LastLineWrapping">
      <summary>Specifies whether or not the last word on the last line is wrapped.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.IncrementalTabStop">
      <summary>Specifies the incremental tab stop position.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontFamily">
      <summary>Specifies the font family name for ranges of the layout that don't have an explicitly specified font family name.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontSize">
      <summary>Specifies the font size for ranges of the layout without an explicitly specified font size.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontStretch">
      <summary>Specifies the font stretch for ranges of the layout without an explicitly specified font stretch.</summary>
      <remarks>Font stretch indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontStyle">
      <summary>Specifies the font style for ranges of the layout without an explicitly specified font style.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontWeight">
      <summary>Specifies the font weight for ranges of the layout without an explicitly specified font weight.</summary>
      <remarks>Font weight indicates the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultLocaleName">
      <summary>Specifies the locale name for ranges of the layout without an explicitly specified locale name.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation">
      <summary>Specifies the orientation of glyphs when a vertical reading direction is used.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation.Default">
      <summary>
      	With this default option and vertical layout, naturally horizontal scripts, such as Latin script,
      	rotate 90 degrees clockwise, while ideographic scripts, such as Chinese, remain upright.
      </summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation.Stacked">
      <summary>
      	With this option and vertical layout, ideographic scripts that permit stacking, such as Latin script,
      	appear stacked, and are not rotated. Connected scripts, such as Arabic, which would otherwise 
      	look broken if glyphs were kept at 0 degrees, remain connected and rotate.
      </summary>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Options">
      <summary>Specifies text drawing options.</summary>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion">
      <summary>A struct describing the result of a hit test operation.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.CharacterIndex">
      <summary>The position index within a piece of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.CharacterCount">
      <summary>A number of characters, counted from the PositionInText, used for describing a range of characters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.LayoutBounds">
      <summary>A rectangle describing the bounds of a piece of text.</summary>
      <remarks>The bounds are relative to the text's layout box. 
      These bounds are in DIPs, and do not take into account any transforms that might be applied while rendering the text.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(Microsoft.Graphics.Canvas.Numerics.Vector2)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(Microsoft.Graphics.Canvas.Numerics.Vector2,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(Microsoft.Graphics.Canvas.Numerics.Vector2,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@,System.Boolean@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@,System.Boolean@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCaretPosition(System.Int32,System.Boolean)">
      <summary>Gets position where the caret (text cursor) would be, given the current text position and caret direction.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCaretPosition(System.Int32,System.Boolean,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets position where the caret (text cursor) would be, given the current text position and caret direction.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCharacterRegions(System.Int32,System.Int32)">
      <summary>Gets an array of descriptions of the range of text.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DrawBounds">
      <summary>Gets the bounds of the parts of the text that would get drawn.</summary>
      <remarks>
      	<p>
      	Draw bounds are different from layout bounds. Below, the draw bounds are outlined in green. Layout bounds are outlined in blue. 
      	</p>
        <img src="../images/TextMetrics.png" alt="CanvasTextLayout diagram" />   
      	<p>
      	The draw bounds are the area that is covered when you draw the text. 
      	Notice how the rectangles don't necessarily align along the top or bottom edge.
      	And how, in some cases, the bounds may overlap each other.
      	</p>
      	<p>
      	The layout bounds align along the top and bottom edges, and are guaranteed never to overlap each other.
      	</p>      	
      	<p>
      	Both types of bounds are useful for different purposes. Layout bounds are useful for positioning text,
      	aligned against an edge. Draw bounds are useful for clipping behavior.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds">
      <summary>Gets the bounds of the parts of the text that align to the layout.</summary>
      <remarks>
      	<p>
      	Draw bounds are different from layout bounds. Below, the draw bounds are outlined in green. Layout bounds are outlined in blue. 
      	</p>
        <img src="../images/TextMetrics.png" alt="CanvasTextLayout diagram" />   
      	<p>
      	The draw bounds are the area that is covered when you draw the text. 
      	Notice how the rectangles don't necessarily align along the top or bottom edge.
      	And how, in some cases, the bounds may overlap each other.
      	</p>
      	<p>
      	The layout bounds align along the top and bottom edges, and are guaranteed never to overlap each other.
      	</p>      	
      	<p>
      	Both types of bounds are useful for different purposes. Layout bounds are useful for positioning text,
      	aligned against an edge. Draw bounds are useful for clipping behavior.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineCount">
      <summary>Gets the number of lines in the text layout.</summary>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Device">
      <summary>Gets the device associated with this text layout.</summary>
    </member>
    
  </members>
</doc>
