<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.CanvasDevice">
      <summary>Devices are used to create graphics resources and drawing sessions.
               Most apps should use the CanvasControl wrapper instead of directly managing their own CanvasDevice.</summary>
      <remarks>
        <p>
          When using <a href="Interop.htm">Direct2D interop</a>, this Win2D class
          corresponds to the Direct2D interface ID2D1Device1.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the CanvasDevice class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.#ctor">
      <summary>Initializes a new instance of the CanvasDevice class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.Dispose">
      <summary>Releases all resources used by the CanvasDevice.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.CreateFromDirect3D11Device(Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice)">
      <summary>Creates a CanvasDevice that will use the specified IDirect3DDevice.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.ForceSoftwareRenderer">
      <summary>Gets the value of the forceSoftwareRendering parameter that was specified when this device was created.</summary>
      <remarks>
        CanvasDevices created using native interop will always have this
        property set to false.
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.Device">
      <summary>Implements the ICanvasResourceCreator interface by returning 'this'.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.Trim">
      <summary>Trims any graphics memory allocated by the graphics device on the app's behalf.</summary>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.MaximumBitmapSizeInPixels">
      <summary>Reports the maximum size of bitmaps supported on this device, in pixels.</summary>
      <remarks>
        <p>
          This size limit is reported in pixels. The limit applies to both the width and height of bitmaps.
          It will vary depending on the Direct3D feature level of the device, and whether the device
          has hardware acceleration enabled. To convert the size limit from pixels to <a href="DPI.htm">DIPs</a>, use the
          ConvertPixelsToDips method found on <see cref="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl"/>,
          <see cref="T:Microsoft.Graphics.Canvas.CanvasDrawingSession"/>, or
          <see cref="T:Microsoft.Graphics.Canvas.CanvasRenderTarget"/>.
        </p>
        <p>
          For more information, see <a href="DPI.htm">DPI and DIPs</a>.
        </p>
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.IsDeviceLost(System.Int32)">
      <summary>Returns whether this device has lost the ability to be operational.</summary>
      <remarks>
          <p>
          This method expects an error code from an exception that your app has caught. 
          IsDeviceLost will return true if the device is indeed lost, <i>and</i> the error
          code actually corresponds to device removal.
          </p>
          <p>
          This is intended to be used like:
          <code>
          try { DrawStuff(); }
          catch (Exception e) where canvasDevice.IsDeviceLost(e.ErrorCode)
          {
              canvasDevice.RaiseDeviceLost();
          }
          </code>
          </p>
          <p>
          For more information, see <a href="HandlingDeviceLost.htm">Handling device lost</a>.
          </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost">
      <summary>Raises an event on the device, indicating that it is no longer operational.</summary>
      <remarks>
          <p>
          This method should be called when your app has caught a device lost exception.
          See <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.IsDeviceLost(System.Int32)"/>.
          </p>
          <p>
          Calling this method will produce an error if there was no actual Direct3D device loss.
          </p>
          <p>
          For more information, see <a href="HandlingDeviceLost.htm">Handling device lost</a>.
          </p>
      </remarks>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.CanvasDevice.DeviceLost">
      <summary>Subscribe to this event to be notified whenever the device ceases to be operational.</summary>
      <remarks>
          <p>
          Any handlers subscribed to this event will be issued whenever <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost"/>
          is called.
          </p>
          <p>
          An implementation of this handler is expected to re-create the device, and any device-dependent resources.
          </p>
          <p>
          For more information, see <a href="HandlingDeviceLost.htm">Handling device lost</a>.
          </p>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.GetSharedDevice" Experimental="true">
      <summary>Gets a device that can be shared between multiple different rendering components, such as controls.</summary>
      <remarks>
          <p>This overload defaults to choosing a hardware accelerated device.</p>
          <p>
          Before being returned, the device is checked for whether it is lost. If it is lost, <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost"/>
          is called on the device, and then it is re-created.
          </p>
          <p>
          The shared device returned may not necessary have the debug level in the <see cref="P:Microsoft.Graphics.Canvas.CanvasDevice.DebugLevel"/> property,
          if the property has been modified in between calls to GetSharedDevice.
          </p>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.GetSharedDevice(System.Boolean)">
      <summary>Gets a device that can be shared between multiple different rendering components, such as controls.</summary>
      <remarks>
          <p>
          Before being returned, the device is checked for whether it is lost. If it is lost, <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost"/>
          is called on the device, and then it is re-created.
          </p>
          <p>
          The shared device returned may not necessary have the debug level in the <see cref="P:Microsoft.Graphics.Canvas.CanvasDevice.DebugLevel"/> property,
          if the property has been modified in between calls to GetSharedDevice.
          </p>
      </remarks>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.DebugLevel">
      <summary>Gets or sets the debug level for devices when they are created.</summary>
      <remarks>
         <p>
         This property is not retroactive. Modifying it won't affect devices which have already been created.
         </p>
         <p>
         For any debug level other than None, Win2D will enable the Direct3D debug layer. 
         Ensure that the Direct3D debug layer is available in environments where you test apps with CanvasDebugLevel options other than None.<br/>
         On Windows 8.1, <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff476881(v=vs.85).aspx#Debug">the debug layer is distributed as an SDK component</a>.<br/>
         On Windows 10, <a href="https://msdn.microsoft.com/en-us/library/mt125501(v=vs.140).aspx#InstallGraphicsTools">the debug layer is distributed as an optional Windows feature</a>.
         </p>
      </remarks>
    </member>
    
    <member name="T:Microsoft.Graphics.Canvas.CanvasDpiRounding">
      <summary>Specifies the rounding behavior while performing dips-to-pixels conversions.</summary>
      <remarks>
      	<p>
      	After applying DPI scaling to a quantity in dips, this rounding scheme
      	is applied immediately before conversion to an integer.
      	The various implementations of
      	<see cref="M:Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(System.Single,Microsoft.Graphics.Canvas.CanvasDpiRounding)"/>
      	return pixels in integral quantities.
      	</p>
      	<p>
      	The Floor option will yield which location in a pixel grid covers the point
      	specified by the dips value. 
      	This is useful for things like converting pointer input to pixel
      	cells in a paint program.
      	</p>
      	<p>
        The Round option will round to the closest representable pixel value.
        This is useful for things like converting the sizes of bitmap resources.
      	</p>
      	</remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasDpiRounding.Floor">
      <summary>Fractional amounts are rounded downward, toward negative infinity.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasDpiRounding.Round">
      <summary>Fractional amounts are rounded to the nearest whole integer.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasDpiRounding.Ceiling">
      <summary>Fractional amounts are rounded upward, toward positive infinity.</summary>
    </member>
    
  </members>
</doc>
