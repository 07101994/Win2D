<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.CanvasDevice">
      <summary>Devices are used to create graphics resources and drawing sessions.
               Most apps should use the CanvasControl wrapper instead of directly managing their own CanvasDevice.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.#ctor(Microsoft.Graphics.Canvas.CanvasDebugLevel)">
      <summary>Initializes a new instance of the CanvasDevice class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.#ctor(Microsoft.Graphics.Canvas.CanvasDebugLevel,System.Boolean)">
      <summary>Initializes a new instance of the CanvasDevice class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.#ctor">
      <summary>Initializes a new instance of the CanvasDevice class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.Dispose">
      <summary>Releases all resources used by the CanvasDevice.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.CreateFromDirect3D11Device(Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DDevice,Microsoft.Graphics.Canvas.CanvasDebugLevel)">
      <summary>Creates a CanvasDevice that will use the specified IDirect3DDevice.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.ForceSoftwareRenderer">
      <summary>Gets the value of the forceSoftwareRendering parameter that was specified when this device was created.</summary>
      <remarks>
        CanvasDevices created using native interop will always have this
        property set to false.
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.Device">
      <summary>Implements the ICanvasResourceCreator interface by returning 'this'.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.Trim">
      <summary>Trims any graphics memory allocated by the graphics device on the app's behalf.</summary>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.CanvasDevice.MaximumBitmapSizeInPixels">
      <summary>Reports the maximum size of bitmaps supported on this device, in pixels.</summary>
      <remarks>
        <p>
          This size limit is reported in pixels. The limit applies to both the width and height of bitmaps.
          It will vary depending on the Direct3D feature level of the device, and whether the device
          has hardware acceleration enabled. To convert the size limit from pixels to <a href="DPI.htm">DIPs</a>, use the
          ConvertPixelsToDips method found on <see cref="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl"/>,
          <see cref="T:Microsoft.Graphics.Canvas.CanvasDrawingSession"/>, or
          <see cref="T:Microsoft.Graphics.Canvas.CanvasRenderTarget"/>.
        </p>
        <p>
          For more information, see <a href="DPI.htm">DPI and DIPs</a>.
        </p>
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.IsDeviceLost(System.Int32)">
      <summary>Returns whether this device has lost the ability to be operational.</summary>
      <remarks>
          <p>
          This method expects an error code from an exception that your app has caught. 
          IsDeviceLost will return true if the device is indeed lost, <i>and</i> the error
          code actually corresponds to device removal.
          </p>
          <p>
          This is intended to be used like:
          <code>
          try { DrawStuff(); }
          catch (Exception e) where canvasDevice.IsDeviceLost(e.ErrorCode)
          {
              canvasDevice.RaiseDeviceLost();
          }
          </code>
          </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost">
      <summary>Raises an event on the device, indicating that it is no longer operational.</summary>
      <remarks>
          <p>
          This method should be called when your app has caught a device lost exception.
          See <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.IsDeviceLost(System.Int32)"/>.
          </p>
          <p>
          Calling this method will produce an error if there was no actual Direct3D device loss.
          </p>
      </remarks>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.CanvasDevice.DeviceLost">
      <summary>Subscribe to this event to be notified whenever the device ceases to be operational.</summary>
      <remarks>
          <p>
          Any handlers subscribed to this event will be issued whenever <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost"/>
          is called.
          </p>
          <p>
          An implementation of this handler is expected to re-create the device, and any device-dependent resources.
          </p>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasDevice.GetSharedDevice(System.Boolean)">
      <summary>Gets a device that can be shared between multiple different rendering components, such as controls.</summary>
          <p>
          Before being returned, the device is checked for whether it is lost. If it is lost, <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.RaiseDeviceLost"/>
          is called on the device, and then it is re-created.
          </p>
    </member>
    
  </members>
</doc>
