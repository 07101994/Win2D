<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.CanvasBitmap">
      <summary>A bitmap is a 2D grid of pixels that form an image.</summary>
      <example>
        <p>To load and draw a bitmap, first add a <see cref="T:Microsoft.Graphics.Canvas.CanvasControl"/> to your XAML page.</p>
        <p>Add the image file you want to display (png, jpeg, etc.) to your Visual Studio project,
           and make sure its Build Action is set to Content.</p>
        <p>In the page implementation class (eg. MainPage.xaml.cs), declare a field to hold the bitmap,
           and another to indicate when the asynchronous load has completed:</p>
        <code>
          CanvasBitmap cat;

          bool isLoaded;
        </code>
        <p>Use the CreateResources event to asynchronously load the bitmap:</p>
        <code>
          async void myWidget_CreateResources(CanvasControl sender, object args)
          {
              cat = await CanvasBitmap.LoadAsync(sender, "ShawnsCat.jpg");

              isLoaded = true;
              myWidget.Invalidate();
          }
        </code>
        <p>Use the Draw event to display it:</p>
        <code>
          void myWidget_Draw(CanvasControl sender, CanvasDrawEventArgs args)
          {
              args.DrawingSession.Clear(Colors.CornflowerBlue);

              if (isLoaded)
              {
                  args.DrawingSession.DrawImage(cat, new Point(42, 42));
              }
          }
        </code>
      </example>
      <remarks>
        <p>When using native interop with CanvasBitmap, the version of GetOrCreate that takes a device must be used.</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.Dispose">
      <summary>Releases all resources used by the CanvasBitmap.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.)</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface.</summary>
      <remarks>
        <p>The bitmap's properties are determined by the properties of surface.</p>
        <p>If the surface is able to be used as a render target then a
        CanvasRenderTarget instance is actually returned.  However, to avoid needing to cast, use <see
        cref="M:Microsoft.Graphics.Canvas.CanvasRenderTarget.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface)"/>.</p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size">
      <summary>Gets the size of the bitmap, in device independent pixels (dips).</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.SizeInPixels">
      <summary>Gets the size of the bitmap, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds">
      <summary>Gets the bounds of the bitmap, in device independent pixels (dips).</summary>
      <remarks>
        This property is a convenience shortcut for when you need the bitmap size in Rect format.
        The value of myBitmap.Bounds is Rect(Point(0, 0), myBitmap.Size).
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Description">
      <summary>The description of this bitmap's underlying surface.</summary>
    </member>  
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface,Microsoft.Graphics.Canvas.CanvasAlphaBehavior)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface, using the specified alpha behavior and default (96) DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface,System.Single)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface, using the specified DPI and premultiplied alpha behavior.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface,Microsoft.Graphics.Canvas.CanvasAlphaBehavior,System.Single)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface, using the specified alpha behavior and DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Byte[],System.Int32,System.Int32,Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat,Microsoft.Graphics.Canvas.CanvasAlphaBehavior)">
      <summary>Creates a CanvasBitmap from an array of bytes, using the specified pixel width/height, alpha behavior and default (96) DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Byte[],System.Int32,System.Int32,Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat,Microsoft.Graphics.Canvas.CanvasAlphaBehavior,System.Single)">
      <summary>Creates a CanvasBitmap from an array of bytes, using the specified pixel width/height, alpha behavior and DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.UI.Color[],System.Int32,System.Int32,Microsoft.Graphics.Canvas.CanvasAlphaBehavior)">
      <summary>Creates a CanvasBitmap from an array of colors, using the specified pixel width/height, alpha behavior and default (96) DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.UI.Color[],System.Int32,System.Int32,Microsoft.Graphics.Canvas.CanvasAlphaBehavior,System.Single)">
      <summary>Creates a CanvasBitmap from an array of colors, using the specified pixel width/height, alpha behavior and DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String,Microsoft.Graphics.Canvas.CanvasAlphaBehavior)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.), and assigns it the specified alpha behavior.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Uri)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.) located at a URI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Uri,Microsoft.Graphics.Canvas.CanvasAlphaBehavior)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.) located at a URI, and assigns it the specified alpha behavior.</summary>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveToFileAsync(System.String)">
      <summary>Saves the entire bitmap to a file with the specified file name, using a default quality level of 0.9 and CanvasBitmapFileFormat.Auto. CanvasBitmapFileFormat.Auto will determine which encoding format to use based on the file extension.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveToFileAsync(System.String,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat)">
      <summary>Saves the entire bitmap to a file with the specified file name and file format, and a default quality level of 0.9.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveToFileAsync(System.String,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single)">
      <summary>Saves the entire bitmap to a file with the specified file name and file format, and quality level.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBytes">
      <summary>Returns an array of raw byte data for the entire bitmap. Works on bitmaps of any format. The size of the array is (Width of bitmap, in pixels) X (Height of bitmap, in pixels) X (bytes per pixel).</summary>
      <remarks>
      The number of bytes per pixel is determined from CanvasBitmap's pixel format. For a CanvasBitmap with the default format of DXGI_FORMAT_B8G8R8A8_UNORM, for example, this is 4.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns an array of raw byte data for a subregion of the bitmap. Works on bitmaps of any format. The size of the array is (Width of subregion, in pixels) X (Height of subregion, in pixels) X (bytes per pixel).</summary>
      <remarks>
      The number of bytes per pixel is determined from CanvasBitmap's pixel format. For a CanvasBitmap with the default format of DXGI_FORMAT_B8G8R8A8_UNORM, for example, this is 4.
      </remarks>    
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetColors">
      <summary>Returns an array of color data for the entire bitmap. The bitmap's format must be DXGI_FORMAT_B8G8R8A8_UNORM. The size of the array is (Width of bitmap, in pixels) X (Height of bitmap, in pixels).</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetColors(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns an array of color data for a subregion of the bitmap The bitmap's format must be DXGI_FORMAT_B8G8R8A8_UNORM. The size of the array is (Width of subregion, in pixels) X (Height of subregion, in pixels).</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat">
      <summary>This denotes the format used when saving a bitmap to a file.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Auto">
      <summary>The actual encoding used is determined from the file extension. If the file extension is not recognized, an error is reported.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Bmp">
      <summary>Indicates Windows Imaging Component's bitmap encoder.</summary>
      <remarks>
      This format stores DPI as a measurement of pixels per meter, while Direct2D and many image-editing utilities store DPI as pixels per inch. While it's typically harmless, it's worth noting that use of this format can sometimes produce unexpectedly non-round-numbers for DPI.
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Png">
      <summary>Indicates Windows Imaging Component's PNG encoder.</summary>
      <remarks>
      This format stores DPI as a measurement of pixels per meter, while Direct2D and many image-editing utilities store DPI as pixels per inch. While it's typically harmless, it's worth noting that use of this format can sometimes produce unexpectedly non-round-numbers for DPI.
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Jpeg">
      <summary>Indicates Windows Imaging Component's bitmap JPEG encoder.</summary>
      <remarks>
      This format supports the selection of a quality level, between 0.0 and 1.0. Quality 0.0 will produce a low quality image with a small file size. Quality 1.0 will produce a high quality image with a large file size.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Tiff">
      <summary>Indicates Windows Imaging Component's TIFF encoder.</summary>
      <remarks>
       This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Gif">
      <summary>Indicates Windows Imaging Component's GIF encoder.</summary>
      <remarks>
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      This format doesn't support storing DPI. No matter what DPI a CanvasBitmap has, a GIF file saved from it will have a default DPI of 96.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR">
      <summary>Indicates Windows Imaging Component's JPEGXR encoder.</summary>
      <remarks>
      This format supports the selection of a quality level, between 0.0 and 1.0. Quality 0.0 will produce a low quality image with a small file size. Quality 1.0 will produce a high quality image with a large file size.
      This format is called Windows Media Photo (WMP) in some documentation.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBounds(Microsoft.Graphics.Canvas.CanvasDrawingSession)">
      <summary>Retrieves the bounds of this CanvasImage, in device-independent units. These bounds are the area the image would fill if it were drawn at target offset (0, 0), and identity transform on the specified drawing session.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBounds(Microsoft.Graphics.Canvas.CanvasDrawingSession,Microsoft.Graphics.Canvas.Numerics.Matrix3x2)">
      <summary>Retrieves the bounds of the CanvasImage, in device-independent units. These bounds are the area the image would fill if it were drawn at target offset (0, 0) with the specified transform transform on the specified drawing session.</summary>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetBytes(System.Byte[])">
      <summary>Sets the byte data of the bitmap from the specified array. Works on bitmaps of any format. The size of the array must be exactly (Width of bitmap, in pixels) X (Height of bitmap, in pixels) X (bytes per pixel).</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetBytes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the byte data of a subregion of the bitmap. Works on bitmaps of any format. The size of the array must be exactly (Width of subregion, in pixels) X (Height of subregion, in pixels) X (bytes per pixel).</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetColors(Windows.UI.Color[])">
      <summary>Sets the color data of the bitmap from the specified array. The bitmap's format must be DXGI_FORMAT_B8G8R8A8_UNORM. The size of the array must be exactly (Width of bitmap, in pixels) X (Height of bitmap, in pixels).</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetColors(Windows.UI.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the color data for a subregion of the bitmap from the specified array. The bitmap's format must be DXGI_FORMAT_B8G8R8A8_UNORM. The size of the array must be exactly (Width of subregion, in pixels) X (Height of subregion, in pixels).</summary>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap)">
      <summary>Copies the entire bitmap specified into this bitmap, at position (0, 0).</summary>
      <remarks>The bitmap specified must be able to fit, and the pixel formats must match.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap,System.Int32,System.Int32)">
      <summary>Copies the entire bitmap specified into this bitmap at the point specified.</summary>
      <remarks>The bitmap specified must be able to fit, and the pixel formats must match.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Copies the specified region of a bitmap into this bitmap, at the point specified. </summary>
      <remarks>The region must be able to fit, and the pixel formats of the two bitmaps must match.</remarks>
    </member>
    
  </members>
</doc>
