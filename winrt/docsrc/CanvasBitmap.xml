<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.ICanvasBitmap">
      <summary>TODO #2138: ICanvasBitmap interface should be internal. In the meantime, please just use CanvasBitmap instead.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.ICanvasBitmap.SizeInDips">
      <summary>TODO #2138: ICanvasBitmap interface should be internal.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.ICanvasBitmap.SizeInPixels">
      <summary>TODO #2138: ICanvasBitmap interface should be internal.</summary>
    </member>

    
    <member name="T:Microsoft.Graphics.Canvas.CanvasBitmap">
      <summary>A bitmap is a 2D grid of pixels that form an image.</summary>
      <example>
        <p>To load and draw a bitmap, first add a <see cref="T:Microsoft.Graphics.Canvas.CanvasControl"/> to your XAML page.</p>
        <p>Add the image file you want to display (png, jpeg, etc.) to your Visual Studio project,
           and make sure its Build Action is set to Content.</p>
        <p>In the page implementation class (eg. MainPage.xaml.cs), declare a field to hold the bitmap,
           and another to indicate when the asynchronous load has completed:</p>
        <!-- TODO #2138: change ICanvasBitmap to CanvasBitmap -->
        <code>
          ICanvasBitmap cat;

          bool isLoaded;
        </code>
        <p>Use the CreatingResources event to asynchronously load the bitmap:</p>
        <code>
          async void myWidget_CreatingResources(CanvasControl sender, object args)
          {
              cat = await CanvasBitmap.LoadAsync(sender, "ShawnsCat.jpg");

              isLoaded = true;
              myWidget.Invalidate();
          }
        </code>
        <p>Use the Drawing event to display it:</p>
        <code>
          void myWidget_Drawing(CanvasControl sender, CanvasDrawingEventArgs args)
          {
              args.DrawingSession.Clear(Colors.CornflowerBlue);

              if (isLoaded)
              {
                  args.DrawingSession.DrawImage(cat, new Point(42, 42));
              }
          }
        </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.Dispose">
      <summary>Releases all resources used by the CanvasBitmap.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.)</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.SizeInDips">
      <summary>Gets the size of the bitmap, in device independent pixels (dips).</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.SizeInPixels">
      <summary>Gets the size of the bitmap, in pixels.</summary>
    </member>
  
  </members>
</doc>
