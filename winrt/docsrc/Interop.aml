<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<topic id="Interop" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        Win2D is implemented as a layer on top of 
        <externalLink>
          <linkUri>http://msdn.microsoft.com/en-us/library/windows/desktop/dd370990</linkUri>
          <linkText>Direct2D</linkText>
        </externalLink>,
        and supports interop in both directions. If you have a Win2D object, you can
        access the native Direct2D object that is used to implement it. If you have a Direct2D 
        object, you can look up the Win2D object that wraps it, or create a new wrapper 
        if one did not already exist.
      </para>

      <para>
        Interop allows you to mix and match Win2D with native DirectX APIs. You can write
        an app that mostly uses Win2D, but drop down to native DirectX at any point -
        perhaps to call into some other API or 3rd party component that requires native interfaces.
        Or your app can be mostly native DirectX, yet you can switch over to Win2D in specific
        places where you want its extra convenience or C# support.
      </para>
    </introduction>
    
    <section>
      <title>Interop APIs</title>
      <content>
        <para>To move back and forth between Win2D and native Direct2D interfaces, use the C++/CX methods:</para>

        <code>
        // header: Microsoft.Graphics.Canvas.native.h
        // namespace: Microsoft::Graphics::Canvas

        template&lt;typename WRAPPER&gt;
        WRAPPER^ GetOrCreate(IUnknown* resource);

        template&lt;typename WRAPPER&gt;
        WRAPPER^ GetOrCreate(CanvasDevice^ device, IUnknown* resource);

        template&lt;typename WRAPPER&gt;
        WRAPPER^ GetOrCreate(ID2D1Device1* device, IUnknown* resource);

        template&lt;typename T, typename U&gt;
        Microsoft::WRL::ComPtr&lt;T&gt; GetWrappedResource(U^ wrapper);
        </code>

        <para>
          GetOrCreate returns an existing wrapper instance if one already exists, or creates a new
          wrapper if one does not. Calling it repeatedly on the same native object will return the
          same wrapper each time, as long as that wrapper instance continues to exist. If all references
          to the wrapper are released such that its reference count goes to zero and it is destroyed,
          any later call to GetOrCreate will have to create a new wrapper.
        </para>

        <para>
          Depending on the wrapper type, a CanvasDevice or ID2D1Device may need
          to be passed in to GetOrCreate().
        </para>
      </content>
    </section>

    <section>
      <title>Examples</title>
      <content>
        <para>First include the necessary headers and namespaces:</para>

        <code>
          #include &lt;Microsoft.Graphics.Canvas.native.h&gt;
          #include &lt;d2d1_2.h&gt;

          using namespace Microsoft::Graphics::Canvas;
          using namespace Microsoft::WRL;
        </code>

        <para>To get the native Direct2D object that is wrapped by a Win2D object:</para>

        <code>
          CanvasDevice^ canvasDevice = ...;
          
          ComPtr&lt;ID2D1Device&gt; nativeDevice = GetWrappedResource&lt;ID2D1Device&gt;(canvasDevice);
        </code>

        <para>To get a Win2D object wrapping a native Direct2D object:</para>

        <code>
          ComPtr&lt;ID2D1Device&gt; nativeDevice = ...;

          CanvasDevice^ canvasDevice = GetOrCreate&lt;CanvasDevice&gt;(nativeDevice.Get());
        </code>

        <para>Types such as CanvasBitmap require that the device is passed to GetOrCreate:</para>

        <code>
          ComPtr&lt;ID2D1Bitmap1&gt; nativeBitmap = ...;

          CanvasBitmap^ bitmap = GetOrCreate&lt;CanvasBitmap&gt;(canvasDevice, nativeBitmap.Get());
        </code>
      </content>
    </section>
    
  </developerConceptualDocument>
</topic>
