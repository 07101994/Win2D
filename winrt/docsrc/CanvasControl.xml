<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl">
      <summary>XAML control providing immediate mode 2D rendering. Start here if you are new to the Win2D API.</summary>
      <remarks>
        <p>
          To get started using Win2D, simply add a CanvasControl to your XAML
          tree, subscribe to its CanvasControl.Draw event, and use the methods of
          CanvasDrawEventArgs.DrawingSession to draw your immediate mode 2D graphics.
        </p>
        <p>
          When using CanvasControl from managed code, care must be 
          taken to avoid memory leaks due to reference count cycles. See 
          <a href="RefCycles.htm">Avoiding memory leaks</a> for more information.
        </p>
      </remarks>
      <example>
        <p>Starting with the "Blank App" XAML project template, edit MainPage.xaml and add the namespace and unloaded handler:</p>
        <code>
          xmlns:canvas="using:Microsoft.Graphics.Canvas.UI.Xaml"
          Unloaded="Page_Unloaded"
        </code>
        <p>Add a CanvasControl to the page:</p>
        <code>
          &lt;Grid&gt;
            &lt;canvas:CanvasControl x:Name="myWidget" CreateResources="myWidget_CreateResources" Draw="myWidget_Draw" ClearColor="CornFlowerBlue"/&gt;
          &lt;/Grid&gt;
        </code>
        <p>Edit MainPage.xaml.cs, and add some drawing code:</p>
        <code>
          public sealed partial class MainPage : Page
          {
              CanvasSolidColorBrush redBrush;

              public MainPage()
              {
                  this.InitializeComponent();
              }

              void myWidget_CreateResources(CanvasControl sender, CanvasCreateResourcesEventArgs args)
              {
                  // Create any resources needed by the Draw event handler.

                  // Asynchronous work can be tracked with TrackAsyncAction:
                  args.TrackAsyncAction(myWidget_CreateResourcesAsync(sender).AsAsyncAction());
              }

              async Task myWidget_CreateResourcesAsync(CanvasControl sender)
              {
                   // Load bitmaps, create brushes, etc.
                   bitmapTiger = await CanvasBitmap.LoadAsync(sender, "imageTiger.jpg");
              }

              void myWidget_Draw(CanvasControl sender, CanvasDrawEventArgs args)
              {
                  args.DrawingSession.DrawEllipse(155, 115, 80, 30, Colors.Black, 3);
                  args.DrawingSession.DrawText("Hello, world!", 100, 100, Colors.Yellow);
              }

              void Page_Unloaded(object sender, RoutedEventArgs e)
              {
                  this.myWidget.RemoveFromVisualTree();
                  this.myWidget = null;
              }
          }
        </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.#ctor">
      <summary>Initializes a new instance of the CanvasControl class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Invalidate">
      <summary>Indicates that the contents of the CanvasControl need to be redrawn.
               Calling Invalidate results in the Draw event being raised shortly afterward.</summary>
      <remarks>
        <p>Normally, the contents of a CanvasControl are drawn only once when it first becomes visible.
           If you want to change those contents, call Invalidate to tell the control it must redraw itself.</p>

        <p>This is a lightweight method, so it is reasonable to call it many times in rapid succession.
           High frequency calls to Invalidate will be merged, with the control only actually redrawing
           at a maximum of the display refresh rate. It will not redraw once for every Invalidate call
           if these are happening faster than the display can keep up.</p>

        <p>If you want to animate the contents of a CanvasControl, you should use
           <see cref="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl"/> instead. CanvasAnimatedControl
           raises the Draw event on a configurable interval; by default this is 60 times per second.</p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Device">
      <summary>Gets the underlying device used by this control.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Size">
      <summary>Gets the current size of the control.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Dpi">
      <summary>Gets the current dots-per-inch (DPI) of this control.</summary>
      <remarks>
        DPI describes the ratio between device independent pixels (dips) and actual physical pixels.
        The identity DPI value is 96, which means dips and pixels are the same.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ConvertPixelsToDips(System.Int32)">
      <summary>Converts units from physical pixels to device independent pixels (dips) based on the current DPI of this control.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ConvertDipsToPixels(System.Single)">
      <summary>Converts units from device independent pixels (dips) to physical pixels based on the current DPI of this control.</summary>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CreateResources">
      <summary>Hook this event to create any resources needed for your drawing.</summary>
      <remarks>      
      <p>
      The CreateResources event is raised once when the CanvasControl is first initialized, then
      again any time the resources need to be recreated, for instance if the graphics device is lost.
      </p>
      <h3>On loading resources outside of CreateResources</h3>
      <p>       
      Normally, apps are expected to use the CreateResources handler for creating controls' resources, 
      so that device dependent resources are re-recreated as necessary if the device is lost. This includes 
      resources that are loaded asynchronously. For asynchronous resource loading, controls are encouraged to 
      use <see cref="M:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs.TrackAsyncAction(Windows.Foundation.IAsyncAction)"/> 
      with CreateResources to ensure correct behavior.
      </p>        
      <p>
      All of this works well for cases where all resources are loaded at startup only.
      </p>        
      <p>     
      But, what about apps which need to load some resources at startup, and some other 
      resources later? For example, consider a game with different levels, and the levels need 
      different graphical assets. Win2D doesn't have something built-in with CreateResources to 
      enable this- an app cannot manually tell a control, "Re-issue CreateResources now, so 
      that I can load different assets from before". However, the building blocks are there to make 
      this work, and allow very good flexibility for how and when the resources are loaded, 
      and be robust with respect to lost device.
      </p>        
      <p>
      Really, what an app wants to do in this case, is have a custom LoadResourcesForLevelAsync method, 
      a 'custom' CreateResources-launched task, like this:
      <code>
      async Task LoadResourcesForLevelAsync(CanvasControl resourceCreator, int level)
      {
          levelBackground = await CanvasBitmap.LoadAsync(resourceCreator, ...);
          levelThingie = await CanvasBitmap.LoadAsync(resourceCreator, ...);
          // etc.
      }
      </code>
      </p>
      The app needs to load some of its resources after CreateResources is completed. In particular, 
      the app will issue the level load after CreateResources has completed- e.g., 
      from its Draw handler. In the code below, the app's Draw handler controls the progress of its 
      level-loading Task. 
      <p>
      </p>        
      <p>
      To make CreateResources work in this situation, and be robust against lost devices, an app needs to do four things:
      <ol>
      <li>
      Track when LoadResourcesForLevelAsync is in progress.
      </li>
      <li>
      Allow Win2D to handle any exceptions (in particular, device lost) that the app does't know how to handle.
      </li>
      <li>
      If Win2D raises the CreateResources event to recover from a lost device while 
      LoadResourcesForLevelAsync is in progress, your CreateResources handler should cancel that task.
      </li>
      <li>
      If Win2D raises CreateResources to recover from a lost device after you have finished loading data 
      using LoadResourcesForLevelAsync, your CreateResources handler must reload that custom data as well as its usual global resources.
      </li>
      </ol>
      </p>        
      <p> 
      Using a CreateResources handler called CanvasControl_CreateResources, and the LoadResourcesForLevelAsync method shown above, 
      here is a complete implementation that handles all four requirements:
      </p>        
      <p>
      <code>
      int? currentLevel, wantedLevel;

      // This implements requirement #1.
      Task levelLoadTask;


      public void LoadNewLevel(int newLevel)
      {
          Debug.Assert(levelLoadTask == null);
          wantedLevel = newLevel;
          levelLoadTask = LoadResourcesForLevelAsync(canvasControl, newLevel);
      }
      
      void CanvasControl_CreateResources(CanvasControl sender,
                                         CanvasCreateResourcesEventArgs args)
      {
          // Synchronous resource creation, for globally-required resources goes here:
          x = new CanvasRenderTarget(sender, ...);
          y = new CanvasRadialGradientBrush(sender, ...);
          // etc.
      
          args.TrackAsyncAction(CreateResourcesAsync(sender).AsAsyncAction());
      }  

      async Task CreateResourcesAsync(CanvasControl sender)
      {
          // If there is a previous load in progress, stop it, and
          // swallow any stale errors. This implements requirement #3.
          if (levelLoadTask != null)
          {
              levelLoadTask.AsAsyncAction().Cancel();
              try { await levelLoadTask; } catch { }
              levelLoadTask = null;
          }
  
          // Unload resources used by the previous level here.
  
          // Asynchronous resource loading, for globally-required resources goes here:
          baz = await CanvasBitmap.LoadAsync(sender, ...);
          qux = await CanvasBitmap.LoadAsync(sender, ...);
          // etc.
  
          // If we are already in a level, reload its per-level resources.
          // This implements requirement #4.
          if (wantedLevel.HasValue)
          {
              LoadNewLevel(wantedLevel.Value);
          }
      }

      // Because of how this is designed to throw an exception, this must only 
      // ever be called from a Win2D event handler.
      bool IsLoadInProgress()
      {
          // No loading task?
          if (levelLoadTask == null)
              return false;

          // Loading task is still running?
          if (!levelLoadTask.IsCompleted)
              return true;

          // Query the load task results and re-throw any exceptions
          // so Win2D can see them. This implements requirement #2.
          try
          {
              levelLoadTask.Wait();
          }
          catch (AggregateException aggregateException)
          {
              // .NET async tasks wrap all errors in an AggregateException.
              // We unpack this so Win2D can directly see any lost device errors.
              aggregateException.Handle(exception => { throw exception; });
          }
          finally
          {
              levelLoadTask = null;
          }
  
          currentLevel = wantedLevel;
          return false;
      }
  

      void CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args)
      {
          if (IsLoadInProgress())
          {
              DrawLoadingScreen();
          }
          else
          {
              DrawCurrentLevel(currentLevel);
          }
      }
      </code>
      </p>  
      </remarks>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Draw">
      <summary>This is where the magic happens! Hook this event to issue your immediate mode 2D drawing calls.</summary>
      <remarks>
        <p>The Draw event is raised once when the CanvasControl first becomes visible, then again
           any time its contents need to be redrawn. This can occur, for example, if the control is resized.
           You can manually trigger a Draw event yourself by calling
           <see cref="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Invalidate"/>.
        </p>
        
        <p>If you want to animate the contents of a CanvasControl, you should use
           <see cref="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl"/> instead. CanvasAnimatedControl
           raises the Draw event on a configurable interval; by default this is 60 times per second.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ClearColor">
      <summary>The color that the control is cleared to before the Draw event is raised.</summary>
      <remarks>
        <p>
          ClearColor defaults to transparent black, that is, Color.FromArgb(0,0,0,0).
        </p>
        <p>
          Modifying ClearColor will cause the control to redraw, as if
          Invalidate() was called.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ReadyToDraw">
      <summary>Gets whether the control is in a state where it is ready to draw.</summary>
      <remarks>
        This control is ready to draw when a device has been created and all
        CreateResources event handlers have completed successfully.
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.RemoveFromVisualTree">
      <summary>Removes the control from the last FrameworkElement it was parented to.</summary>
      <remarks>
        <p>
          When using this control from managed code it is necessary to ensure
          that all references to it are released, otherwise it will not get
          garbage collected correctly.  To do this, call RemoveFromVisualTree
          from the Unloaded event handler of the page that the control was on
          and then release any explicit references to it.
        </p>
        <p>For more information, see <a href="RefCycles.htm">Avoiding memory leaks</a>.</p>
        <example>
          <code>
        void page_Unloaded(object sender, RoutedEventArgs e)
        {
            this.canvas.RemoveFromVisualTree();
            this.canvas = null;
        }
          </code>
        </example>
      </remarks>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Draw"/> event.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs.#ctor(Microsoft.Graphics.Canvas.CanvasDrawingSession)">
      <summary>Initializes a new instance of the CanvasDrawEventArgs class.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs.DrawingSession">
      <summary>Gets the drawing session for use by the current event handler.
               This provides methods to draw lines, rectangles, text etc.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CreateResources"/> event.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs.TrackAsyncAction(Windows.Foundation.IAsyncAction)">
      <summary>Causes the sender to track an action that must completed before
      the CreateResources operation can be considered finished.</summary>
      <remarks>
        <p>
          Use this when creating resources involves asynchronous method calls,
          such as <see cref="O:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync">CanvasBitmap.LoadAsync</see>.
        </p>
        
        <code>
        void Canvas_CreateResources(CanvasControl sender, CanvasCreateResourcesEventArgs args)
        {
            args.TrackAsyncAction(Canvas_CreateResourcesAsync(sender).AsAsyncAction());
        }

        async Task Canvas_CreateResourcesAsync(CanvasControl sender)
        {
            bitmapTiger = await CanvasBitmap.LoadAsync(sender, "imageTiger.jpg");
        }
        </code>
        <p>
          In the current implementation, only one action can be tracked at a
          time.  Attempting to track multiple actions simultaneously will cause
          TrackAsyncAction to throw an exception.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs.Reason">
      <summary>Indicates why the CreateResources event was raised.</summary>
      <remarks>This information can be used to optimize resource recreation.
               For instance if the DPI has changed, only resources that depend
               on DPI (such as rendertargets) need to be recreated.</remarks>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason">
      <summary>Indicates why a CreateResources event was raised.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason.FirstTime">
      <summary>First time resource creation. Everything must be created from scratch.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason.NewDevice">
      <summary>A new device has been created, to recover from a lost device error. All
               graphics resources must be recreated, but other data (for example memory
               buffers that were previously loaded from the filesystem) may be reused.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason.DpiChanged">
      <summary>The display DPI has changed.
               Only resources that depend on DPI need to be recreated.</summary>
    </member>

  </members>
</doc>
